<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 桑弧蓬矢射四方]]></title>
  <link href="http://iphyer.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://iphyer.github.com/"/>
  <updated>2018-08-21T18:27:16+08:00</updated>
  <id>http://iphyer.github.com/</id>
  <author>
    <name><![CDATA[iphyer]]></name>
    <email><![CDATA[iphyer@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[修复 AttributeError: module 'pip' has no attribute 'main' in PyCharm]]></title>
    <link href="http://iphyer.github.com/blog/2018/04/20/esl/"/>
    <updated>2018-04-20T23:32:00+08:00</updated>
    <id>http://iphyer.github.com/blog/2018/04/20/esl</id>
    <content type="html"><![CDATA[<h2 id="section">起因</h2>

<p>PyCharm 是我很喜欢的 IDE，最近遇到一个很奇怪的问题 <code>AttributeError: module 'pip' has no attribute 'main'</code>，这里记录下修复过程。</p>

<!--more-->

<h2 id="section-1">原因</h2>

<p>具体的错误情况如下图所示,</p>

<p><img src="/images/Python/pipDowngrade/problem.jpg" alt="Problems" /></p>

<p>这里的原因其实报错信息都给出了，</p>

<p>```python</p>

<p>Traceback (most recent call last):
  File “/Applications/PyCharm CE.app/Contents/helpers/packaging_tool.py”, line 192, in main
    retcode = do_install(pkgs)
  File “/Applications/PyCharm CE.app/Contents/helpers/packaging_tool.py”, line 109, in do_install
    return pip.main([‘install’] + pkgs)
AttributeError: module ‘pip’ has no attribute ‘main’</p>

<p>```</p>

<p>主要原因就是 <code>pip</code> 找不到 <code>main</code> 属性，谷歌下找到原因，<a href="https://stackoverflow.com/questions/49839610/attributeerror-module-pip-has-no-attribute-main">AttributeError: Module Pip has no attribute ‘main’</a>，原因很简单， <code>pip</code> 版本 10 不支持低版本的属性。相对来说降级 <code>pip</code>  版本。</p>

<h2 id="section-2">解决方案</h2>

<p>解决方案也很简单，只要降级就行了。合适的版本是 <code>pip==9.0.3</code>。</p>

<p>首先找到自己的虚拟环境名称，我用的是 <code>microBlog</code> 所以运行如下命令即可，</p>

<p><code>bash
conda install -n microBlog pip=9.0.3
</code></p>

<p>当然我这里用的是 <code>conda</code> 作为包管理器。</p>

<p>结果图</p>

<p><img src="/images/Python/pipDowngrade/sol.jpg" alt="Solved" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[doctest使用记录]]></title>
    <link href="http://iphyer.github.com/blog/2017/03/22/doctest/"/>
    <updated>2017-03-22T23:56:00+08:00</updated>
    <id>http://iphyer.github.com/blog/2017/03/22/doctest</id>
    <content type="html"><![CDATA[<h2 id="section">起源</h2>

<p>最近刚刚刷完了 Coursea 一门公开课，感觉收货很大，推荐下这门课，Learn to Program: Crafting Quality Code。</p>

<p><img src="/images/doctest/learn.png" alt="Learn to Program: Crafting Quality Code" /></p>

<p>这门课从名字就能看出来并不是为 Python 基础入门而准备的，相反这门课是为大家进一步提高自己的编程能力而开设的。在5周的课程中，重点在于如何写出清晰，可用，健壮的程序。</p>

<p>这篇博客不细细介绍这门课程，推荐大家自行学习，这里总结下我觉得收货最大的一个地方，认识了 doctest这个非常好用的 Python 测试架构。</p>

<p>所有的 code 基于 Python3。</p>

<!--more-->

<h2 id="doctest-">使用 doctest 的背景</h2>

<p>这里我简单介绍下 doctest 的使用背景。如果脱离了使用场景和程序的背景，独立地评价某个程序的优劣是非常偏颇的。</p>

<p>正常我们编写程序，都会先总结出某个需求，然后设计数据结构并构思算法，甚至可能画出 UML 图，流程图来总结自己的想法。</p>

<p>在这个过程中，最重要的就是抽象出每一个功能模块的输入和输出，不考虑具体的模块内部设计，输入输出是你在整体把握程序时最重要的参考。</p>

<p>doctest 正是利用这个过程进行代码测试的工作。所以要体会到 doctest 的先进性，首先，必须明确你的代码设计过程是符合上述流程的。当然上述流程是绝大多数程序员喜欢的过程，也是绝大多数场景下推荐的(肯定存在特例，比如你的主要工作是接手别人的代码，ORZ)。既然我们在设计每个程序模块的时候都会规定好输入和输出，何不用这些规定来做程序测试？甚至进一步，这些测试能不能用来展示程序的用法呢？</p>

<h1 id="doctest">doctest</h1>

<p>根据官方文档的介绍 doctest 的目的是:</p>

<blockquote>
  <p>The doctest module searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown. There are several common ways to use doctest:</p>
</blockquote>

<blockquote>
  <ul>
    <li>To check that a module’s docstrings are up-to-date by verifying that all interactive examples still work as documented.</li>
    <li>To perform regression testing by verifying that interactive examples from a test file or a test object work as expected.</li>
    <li>To write tutorial documentation for a package, liberally illustrated with input-output examples. Depending on whether the examples or the expository text are emphasized, this has the flavor of “literate testing” or “executable documentation”.</li>
  </ul>
</blockquote>

<h2 id="section-1">示例</h2>

<p>Talk is Cheap, show me the code.</p>

<p>这里直接举 doctest 官方文档中的例子，方便大家理解。</p>

<pre style="color:#55cc66;background:#001800;"><span style="color:#b96969; ">"""</span>
<span style="color:#b96969; ">This is the "example" module.</span>
<span style="color:#b96969; "></span>
<span style="color:#b96969; ">The example module supplies one function, factorial().  For example,</span>
<span style="color:#b96969; "></span>
<span style="color:#b96969; ">&gt;&gt;&gt; factorial(5)</span>
<span style="color:#b96969; ">120</span>
<span style="color:#b96969; ">"""</span>

<span style="color:#508050; font-weight:bold; ">def</span> factorial<span style="color:#808030; ">(</span>n<span style="color:#808030; ">)</span><span style="color:#808030; ">:</span>
    <span style="color:#b96969; ">"""Return the factorial of n, an exact integer &gt;= 0.</span>
<span style="color:#b96969; "></span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&gt;&gt;&gt; [factorial(n) for n in range(6)]</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;[1, 1, 2, 6, 24, 120]</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&gt;&gt;&gt; factorial(30)</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;265252859812191058636308480000000</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&gt;&gt;&gt; factorial(-1)</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;Traceback (most recent call last):</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;...</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;ValueError: n must be &gt;= 0</span>
<span style="color:#b96969; "></span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;Factorials of floats are OK, but the float must be an exact integer:</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&gt;&gt;&gt; factorial(30.1)</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;Traceback (most recent call last):</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;...</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;ValueError: n must be exact integer</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&gt;&gt;&gt; factorial(30.0)</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;265252859812191058636308480000000</span>
<span style="color:#b96969; "></span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;It must also not be ridiculously large:</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&gt;&gt;&gt; factorial(1e100)</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;Traceback (most recent call last):</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;...</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;OverflowError: n too large</span>
<span style="color:#b96969; ">&#xa0;&#xa0;&#xa0;&#xa0;"""</span>

    <span style="color:#508050; font-weight:bold; ">import</span> math
    <span style="color:#508050; font-weight:bold; ">if</span> <span style="color:#508050; font-weight:bold; ">not</span> n <span style="color:#44aadd; ">&gt;=</span> <span style="color:#778c77; ">0</span><span style="color:#808030; ">:</span>
        <span style="color:#508050; font-weight:bold; ">raise</span> <span style="color:#477766; ">ValueError</span><span style="color:#808030; ">(</span><span style="color:#cc5555; ">"n must be &gt;= 0"</span><span style="color:#808030; ">)</span>
    <span style="color:#508050; font-weight:bold; ">if</span> math<span style="color:#808030; ">.</span>floor<span style="color:#808030; ">(</span>n<span style="color:#808030; ">)</span> <span style="color:#44aadd; ">!=</span> n<span style="color:#808030; ">:</span>
        <span style="color:#508050; font-weight:bold; ">raise</span> <span style="color:#477766; ">ValueError</span><span style="color:#808030; ">(</span><span style="color:#cc5555; ">"n must be exact integer"</span><span style="color:#808030; ">)</span>
    <span style="color:#508050; font-weight:bold; ">if</span> n<span style="color:#44aadd; ">+</span><span style="color:#778c77; ">1</span> <span style="color:#44aadd; ">==</span> n<span style="color:#808030; ">:</span>  <span style="color:#b96969; "># catch a value like 1e300</span>
        <span style="color:#508050; font-weight:bold; ">raise</span> <span style="color:#477766; ">OverflowError</span><span style="color:#808030; ">(</span><span style="color:#cc5555; ">"n too large"</span><span style="color:#808030; ">)</span>
    result <span style="color:#808030; ">=</span> <span style="color:#778c77; ">1</span>
    factor <span style="color:#808030; ">=</span> <span style="color:#778c77; ">2</span>
    <span style="color:#508050; font-weight:bold; ">while</span> factor <span style="color:#44aadd; ">&lt;=</span> n<span style="color:#808030; ">:</span>
        result <span style="color:#44aadd; ">*</span><span style="color:#808030; ">=</span> factor
        factor <span style="color:#44aadd; ">+</span><span style="color:#808030; ">=</span> <span style="color:#778c77; ">1</span>
    <span style="color:#508050; font-weight:bold; ">return</span> result


<span style="color:#508050; font-weight:bold; ">if</span> <span style="color:#477766; ">__name__</span> <span style="color:#44aadd; ">==</span> <span style="color:#cc5555; ">"__main__"</span><span style="color:#808030; ">:</span>
    <span style="color:#508050; font-weight:bold; ">import</span> doctest
    doctest<span style="color:#808030; ">.</span>testmod<span style="color:#808030; ">(</span><span style="color:#808030; ">)</span>
</pre>

<p>上面的 code 就是 Python 代码，设代码存在<code>example.py</code>文件中。</p>

<p>代码的功能就是返回所有正整数的阶乘。</p>

<p>现在就可以在 terminal 使用如下方法调用该文件:</p>

<pre style="color:#55cc66;background:#001800;">python example<span style="color:#808030; ">.</span>py
</pre>

<p>会发现没有任何异常输出，这表示代码在注释中所有的测试都通过，所以不显示输出。</p>

<p>如果觉得不直观，可以添加如下的参数，再运行:</p>

<pre style="color:#55cc66;background:#001800;"><span style="color:#44aadd; ">&gt;&gt;</span><span style="color:#44aadd; ">&gt;</span>python example<span style="color:#808030; ">.</span>py <span style="color:#44aadd; ">-</span>v
Trying<span style="color:#808030; ">:</span>
    factorial<span style="color:#808030; ">(</span><span style="color:#778c77; ">5</span><span style="color:#808030; ">)</span>
Expecting<span style="color:#808030; ">:</span>
    <span style="color:#778c77; ">120</span>
ok
Trying<span style="color:#808030; ">:</span>
    <span style="color:#808030; ">[</span>factorial<span style="color:#808030; ">(</span>n<span style="color:#808030; ">)</span> <span style="color:#508050; font-weight:bold; ">for</span> n <span style="color:#508050; font-weight:bold; ">in</span> <span style="color:#400000; ">range</span><span style="color:#808030; ">(</span><span style="color:#778c77; ">6</span><span style="color:#808030; ">)</span><span style="color:#808030; ">]</span>
Expecting<span style="color:#808030; ">:</span>
    <span style="color:#808030; ">[</span><span style="color:#778c77; ">1</span><span style="color:#808030; ">,</span> <span style="color:#778c77; ">1</span><span style="color:#808030; ">,</span> <span style="color:#778c77; ">2</span><span style="color:#808030; ">,</span> <span style="color:#778c77; ">6</span><span style="color:#808030; ">,</span> <span style="color:#778c77; ">24</span><span style="color:#808030; ">,</span> <span style="color:#778c77; ">120</span><span style="color:#808030; ">]</span>
ok
Trying<span style="color:#808030; ">:</span>
    factorial<span style="color:#808030; ">(</span><span style="color:#778c77; ">30</span><span style="color:#808030; ">)</span>
Expecting<span style="color:#808030; ">:</span>
    <span style="color:#778c77; ">265252859812191058636308480000000</span>
ok
Trying<span style="color:#808030; ">:</span>
    factorial<span style="color:#808030; ">(</span><span style="color:#44aadd; ">-</span><span style="color:#778c77; ">1</span><span style="color:#808030; ">)</span>
Expecting<span style="color:#808030; ">:</span>
    Traceback <span style="color:#808030; ">(</span>most recent call last<span style="color:#808030; ">)</span><span style="color:#808030; ">:</span>
        <span style="color:#808030; ">.</span><span style="color:#808030; ">.</span><span style="color:#808030; ">.</span>
    <span style="color:#477766; ">ValueError</span><span style="color:#808030; ">:</span> n must be <span style="color:#44aadd; ">&gt;=</span> <span style="color:#778c77; ">0</span>
ok
Trying<span style="color:#808030; ">:</span>
    factorial<span style="color:#808030; ">(</span><span style="color:#778c77; ">30.1</span><span style="color:#808030; ">)</span>
Expecting<span style="color:#808030; ">:</span>
    Traceback <span style="color:#808030; ">(</span>most recent call last<span style="color:#808030; ">)</span><span style="color:#808030; ">:</span>
        <span style="color:#808030; ">.</span><span style="color:#808030; ">.</span><span style="color:#808030; ">.</span>
    <span style="color:#477766; ">ValueError</span><span style="color:#808030; ">:</span> n must be exact integer
ok
Trying<span style="color:#808030; ">:</span>
    factorial<span style="color:#808030; ">(</span><span style="color:#778c77; ">30.0</span><span style="color:#808030; ">)</span>
Expecting<span style="color:#808030; ">:</span>
    <span style="color:#778c77; ">265252859812191058636308480000000</span>
ok
Trying<span style="color:#808030; ">:</span>
    factorial<span style="color:#808030; ">(</span><span style="color:#778c77; ">1</span><span style="color:#ffffff; background:#dd0000; font-weight:bold; font-style:italic; ">e100</span><span style="color:#808030; ">)</span>
Expecting<span style="color:#808030; ">:</span>
    Traceback <span style="color:#808030; ">(</span>most recent call last<span style="color:#808030; ">)</span><span style="color:#808030; ">:</span>
        <span style="color:#808030; ">.</span><span style="color:#808030; ">.</span><span style="color:#808030; ">.</span>
    <span style="color:#477766; ">OverflowError</span><span style="color:#808030; ">:</span> n too large
ok
<span style="color:#778c77; ">2</span> items passed <span style="color:#400000; ">all</span> tests<span style="color:#808030; ">:</span>
   <span style="color:#778c77; ">1</span> tests <span style="color:#508050; font-weight:bold; ">in</span> __main__
   <span style="color:#778c77; ">6</span> tests <span style="color:#508050; font-weight:bold; ">in</span> __main__<span style="color:#808030; ">.</span>factorial
<span style="color:#778c77; ">7</span> tests <span style="color:#508050; font-weight:bold; ">in</span> <span style="color:#778c77; ">2</span> items<span style="color:#808030; ">.</span>
<span style="color:#778c77; ">7</span> passed <span style="color:#508050; font-weight:bold; ">and</span> <span style="color:#778c77; ">0</span> failed<span style="color:#808030; ">.</span>
Test passed<span style="color:#808030; ">.</span>
</pre>

<p><code>-v</code>表示显示详细信息。最后的总与信息也是非常有用的，可以帮助具体判断。</p>

<p>当然，在这个例子中，更加值得探讨的是哪些例子是比较好的测试用例，针对这些测试用例有什么比较好的方法来检测。不过这是另外一个话题就不在这儿讨论了。当然你也可以看 doctest 自己的检测方法，如何 eat you own shit 的方法实现测试。具体网址 <a href="https://svn.python.org/projects/python/trunk/Lib/test/test_doctest.py">Test script for doctest.</a></p>

<h2 id="section-2">讨论</h2>

<h3 id="section-3">测试文件</h3>

<p>虽然，我很喜欢把测试文件写在源程序中，这样往往让程序比较臃肿，所以 doctest 还可以把测试语句写在文件中，比如这样:</p>

<pre style="color:#55cc66;background:#001800;">The <span style="color:#808030; ">`</span><span style="color:#808030; ">`</span>example<span style="color:#808030; ">`</span><span style="color:#808030; ">`</span> module
<span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span><span style="color:#44aadd; ">==</span>

Using <span style="color:#808030; ">`</span><span style="color:#808030; ">`</span>factorial<span style="color:#808030; ">`</span><span style="color:#808030; ">`</span>
<span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span><span style="color:#44aadd; ">-</span>

This <span style="color:#508050; font-weight:bold; ">is</span> an example text <span style="color:#400000; ">file</span> <span style="color:#508050; font-weight:bold; ">in</span> reStructuredText format<span style="color:#808030; ">.</span>  First <span style="color:#508050; font-weight:bold; ">import</span>
<span style="color:#808030; ">`</span><span style="color:#808030; ">`</span>factorial<span style="color:#808030; ">`</span><span style="color:#808030; ">`</span> <span style="color:#508050; font-weight:bold; ">from</span> the <span style="color:#808030; ">`</span><span style="color:#808030; ">`</span>example<span style="color:#808030; ">`</span><span style="color:#808030; ">`</span> module<span style="color:#808030; ">:</span>

    <span style="color:#44aadd; ">&gt;&gt;</span><span style="color:#44aadd; ">&gt;</span> <span style="color:#508050; font-weight:bold; ">from</span> example <span style="color:#508050; font-weight:bold; ">import</span> factorial

Now use it<span style="color:#808030; ">:</span>

    <span style="color:#44aadd; ">&gt;&gt;</span><span style="color:#44aadd; ">&gt;</span> factorial<span style="color:#808030; ">(</span><span style="color:#778c77; ">6</span><span style="color:#808030; ">)</span>
    <span style="color:#778c77; ">120</span>
</pre>

<p>设文件存为 <code>example.txt</code>， 那么在 <code>main</code> 中的调用就是</p>

<pre style="color:#55cc66;background:#001800;"><span style="color:#508050; font-weight:bold; ">import</span> doctest
doctest<span style="color:#808030; ">.</span>testfile<span style="color:#808030; ">(</span><span style="color:#cc5555; ">"example.txt"</span><span style="color:#808030; ">)</span>
</pre>

<p><code>testfile()</code>方法可以实现从文件中测试的目的。</p>

<h1 id="section-4">总结</h1>

<p>这是一篇简短的介绍，本身 doctest 包就非短小精悍，具体的细节可以参考官方文档. <a href="https://docs.python.org/3.3/library/doctest.html"> doctest — Test interactive Python examples</a> </p>

<p>当然对于大型的项目，可能更加适合的使用的是 <code>unittest</code> 这样的测试框架而不是 doctest。这也是为什么在 MOOC 中又介绍 <code>unittest</code> 的原因。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anaconda使用记录]]></title>
    <link href="http://iphyer.github.com/blog/2016/02/15/anaconda/"/>
    <updated>2016-02-15T13:14:00+08:00</updated>
    <id>http://iphyer.github.com/blog/2016/02/15/anaconda</id>
    <content type="html"><![CDATA[<h1 id="section">前言</h1>

<p>经常使用 Python，以前为了解决依赖经常踩坑，后来有了 pip 生活充满了希望。但是每一次升级系统或者回家更换电脑，比如春节这样的假期就会非常难过。因为重新安装是如此大的系统性工程以至于经常感觉无力。</p>

<p>不过自从出现了整合的发行版，一下子生活简单了很多。</p>

<p>这里推荐自己经常使用的　Anaconda　给大家确实是神器，非常方便。</p>

<!--more-->

<h1 id="anaconda-">Anaconda 介绍</h1>

<p>根据官网简介:</p>

<blockquote>
  <p>Anaconda is an easy-to-install, free package manager, environment manager, Python distribution, and collection of over 150 open source packages with free community support.</p>
</blockquote>

<p>Anaconda是一个类似 Ubuntu　这样的整合发行版。同事　Anaconda　支持使用比如　pip 命令安装软件包，所以一下子大大简化了安装过程。</p>

<p>具体的可以根据你需要使用的项目去查看　Anaconda 的支持包列表，<a href="http://docs.continuum.io/anaconda/pkg-docs">Anaconda 2.5.0 Package List</a> 基本上你需要使用到的各个 Python 科学计算包都已经包括在内了。</p>

<h1 id="anaconda--1">Anaconda 安装</h1>

<p>安装特别简单，只要网络足够就可以非常容易地安装完成。</p>

<p>安装过程可以参考这个网页<a href="http://docs.continuum.io/anaconda/install">Anaconda install</a>.</p>

<p>Windows 下只要你下载安装包，点击运行就行。 Linux下也很简单，只要下载好安装包，然后 bash 运行下就行。</p>

<p>特别值得一说的就是，删除真的很方便啊，直接　<code>rm -rf ~/anaconda</code> ，　当然后面的地址应该是你的安装地址。</p>

<p>更新也非常方便</p>

<p>```
conda update conda
conda update anaconda</p>

<p>```</p>

<p>就可以快速地更新版本。</p>

<h1 id="anaconda--2">Anaconda 使用</h1>

<p>因为有配套的商业版，所以　Anaconda　的文档支持做得相当得好。比如这里可以得到完整的文档信息，写得非常精炼，基本上讲到了使用 Python　的方方面面。下面我简单介绍下。</p>

<h2 id="python">Python　使用的一般规律</h2>

<p>这里不依赖于　Anaconda 而讲讲 Python 使用的一般规律和经验。</p>

<p>一般而言，首先你需要明确自己是用　Python2 还是　Python3 这连个是不兼容的版本。虽然可以修改通过，但是还是推荐大家不要弄混淆了。通常这个是由你的核心功能包决定的，因为 Python 的发展离不开开源社区的支持，但是开源社区通常和最新的版本支持之间会有一个衔接过程，同时有的开源软件是作者个人使用的计划项目作者很有可能用完了就不再支持了所以大量的情况下会出现很多“孤儿包”也就是只有少部分人使用而没有足够的社群支持。在开源的世界里这个才是常态，大家习惯就好。</p>

<p>所以需要你明确自己的核心项目然后开始使用相应的 Python 版本。</p>

<p>但是更经常出现的情况是，你不会单单只从事一个项目，即使你目前只从事一个项目你将来也可能从事一个截然不同的项目。比如 A 项目的 Python 版本是 2.4 (比较老，但是依然在使用的项目)，但是最新的 B 项目已经是 Python2.7,甚至计划中的 C　项目打算使用　Python3。当然也可能出现这样的情况，你需要导入的 Python　模块有不同的版本，所以你需要能够创建两个不同的虚拟环境，里面安装这个module的不同版本。你需要一套方法来合理分配自己的机器上的各种代码和项目。</p>

<p>所以就出现了管理这样不同场景的需求，而通常的做法是使用 <code>virtualenv</code> 这样的软件来辅助自己管理相应的功能。</p>

<p>具体的内容大家可以参考这个博文<a href="http://www.cnblogs.com/hiddenfox/p/virtualenv-python3.html">用virtualenv管理python3运行环境</a></p>

<p>我简单总结下就是，以　Python3　为例的话，首先我们创建一个python3的虚拟环境，当然系统里得先装好了python3。</p>

<p>```
mkvirtualenv -p python3 py3env</p>

<p>```</p>

<p>-p 后面的参数指定了python3（也有可能要换成python3.2/python3.4，具体要看你系统里面/use/bin/里面的文件是什么名字），如果去掉这个参数，就会使用系统默认的python。最后一个参数py3env是创建的这个环境的名字。</p>

<p>执行完了之后，会自动切换到这个新创建的虚拟环境。我们会发现命令行提示符会发生改变，例如在我的机器上：从 <code>XXX@XXX-HP-ProBook-4441s</code>变成了 <code>(py3env) XXX@XXX-HP-ProBook-4441s</code> ，最前面多了这个虚拟环境的名字。</p>

<p>其他一些常用命令：</p>

<p>```
deactivate                # 退出当前虚拟环境
workon [虚拟环境名称]       # 使用某个虚拟环境
rmvirtualenv [虚拟环境名称] # 删除某个虚拟环境
lsvirtualenv              # 列出所有虚拟环境</p>

<p>```</p>

<h2 id="conda-">使用 conda 管理</h2>

<p>当然在 Anaconda 中也是利用这个相似的方法来实现管理的功能，当然需要做一定的修改以配合其他的诸如升级，删除包的功能需求。这就是 conda 。按照官方的说法:</p>

<blockquote>
  <p>Conda is both a package manager and an environment manager. You know that a package manager helps you find and install packages. But let’s say that you want to use a package that requires a different version of Python than you are currently using. With just a few commands you can set up a totally separate environment to run that different version of Python, and yet continue to run your usual version of Python in your normal environment. That’s the power of having an environment manager like conda.</p>
</blockquote>

<p>conda既是包管理器也是运行环境管理器。</p>

<p>首先输入 </p>

<p>```</p>

<p>conda –version</p>

<p>``` </p>

<p>查看本地安装的 conda 是否成功，如果你安装 Anaconda 而这步报错则很有可能你没有设置好 .bashrc 中的环境变量。我的结果是 <code>conda 3.19.1</code> 。</p>

<p>然后可以用</p>

<p><code>
conda update conda
</code>
来更新所有包， conda 会自动处理是不是需要更新包，这点和 Ubuntu 的软件包管理非常相似就是设立一个分发中心，大家都通过和这个中心进行匹配以便更新。</p>

<h2 id="section-1">管理环境变量</h2>

<p>创建环境变量</p>

<p><code>
conda create --name monky flask 
</code></p>

<p>这会安装一个名字叫 <code>monky</code> 环境，然后里面已经安装了 flask 包，和 <code>virtualenv</code> 不同，conda 要求指定一个包，如果你还没有想好的包名称的话(虽然这个比较少，多见于测试)，那么你可以指定下 Python 的版本,当然加上包名称也是没有任何问题的。</p>

<p>比如我这个命令</p>

<p><code>
conda create --name bunnies python=3
</code></p>

<p>就会有如下输出</p>

<p>```
Using Anaconda Cloud api site https://api.anaconda.org
Fetching package metadata: Could not connect to https://repo.continuum.io/pkgs/pro/noarch/
Could not connect to https://repo.continuum.io/pkgs/pro/linux-64/
Could not connect to https://repo.continuum.io/pkgs/free/noarch/
.Could not connect to https://repo.continuum.io/pkgs/free/linux-64/
…
Solving package specifications: …………
Package plan for installation in environment /home/iphyer/.conda/envs/bunnies:</p>

<p>The following packages will be downloaded:</p>

<pre><code>package                    |            build
---------------------------|-----------------
xz-5.0.5                   |                1         572 KB
wheel-0.29.0               |           py35_0          82 KB
------------------------------------------------------------
                                       Total:         654 KB
</code></pre>

<p>The following NEW packages will be INSTALLED:</p>

<pre><code>openssl:    1.0.2f-0      (soft-link)
pip:        8.0.2-py35_0  (soft-link)
python:     3.5.1-0       (soft-link)
readline:   6.2-2         (soft-link)
setuptools: 19.6.2-py35_0 (soft-link)
sqlite:     3.9.2-0       (soft-link)
tk:         8.5.18-0      (soft-link)
wheel:      0.29.0-py35_0
xz:         5.0.5-1      
zlib:       1.2.8-0       (soft-link)
</code></pre>

<p>Proceed ([y]/n)? n    <br />
```
我没有链接到网上但是可以清晰的看到 Anaconda 是怎么处理这里的包问题，如果已经安装了相应的包就直接软链接过去，如果没有就链接到 Anaconda 的官网上下载。当然要查看 Anaconda 默认安装了那些包可以在这个网址查看 <a href="http://docs.continuum.io/anaconda/pkg-docs">Anaconda 2.5.0 Package List</a>。当然如果没有安装， Anaconda 会自动联网安装。</p>

<p>安装成功后，可以用如下命令进入相应的环境中开发。</p>

<p>```
Linking packages …
[      COMPLETE      ]|#######################################################| 100%
#
# To activate this environment, use:
# $ source activate bunnies
#
# To deactivate this environment, use:
# $ source deactivate
#</p>

<p>```
你可以通过如下命令查看系统中已经有多少环境</p>

<p><code>
conda info --envs
</code>
输出结果如下:</p>

<p>```
# conda environments:
#
bunnies                  /home/iphyer/.conda/envs/bunnies
cow                      /home/iphyer/.conda/envs/cow
monky                    /home/iphyer/.conda/envs/monky
snakes                   /home/iphyer/.conda/envs/snakes
root                  *  /home/iphyer/anaconda3</p>

<p>```</p>

<p>注意到root环境中的星号 * 那就是当前使用的环境。</p>

<p>当然你也可以比如你基于你之前的工作新开一个工作，比如添加新功能那么可以直接使用:</p>

<p><code>
conda create --name flowers --clone snakes
</code></p>

<p>这将会建立一个叫做<code>flowers</code>的环境，所有内容都来自<code>snakes</code>这个已经设置好的环境。</p>

<p>当然删除一个环境也很方便，比如:</p>

<p><code>
conda remove --name flowers --all
</code></p>

<p>这样就会删除所有的 flowers 环境内容。</p>

<h2 id="python-1">管理 Python</h2>

<p>Conda 把 Python 也当做一个包进行管理。</p>

<p>你可以用 </p>

<p><code>
conda search --full-name python
</code></p>

<p>查看到底有多少 Python 的版本，如果不加上 <code>--full-name</code> 那么其实是使用这个命令 <code>conda search python</code> 这个查找的是到底多少包的名字里面含有 python.</p>

<p>所以还记得</p>

<p><code>
conda create --name snakes python=3
</code></p>

<p>这样就可以安装一个使用 Python3 的名叫 snakes 的环境了。</p>

<h2 id="section-2">管理包</h2>

<p>可以输入 </p>

<p><code>
conda list
</code></p>

<p>查看当前环境安装的包。</p>

<p>当然你也可以通过</p>

<p><code>
conda search beautifulsoup4
</code></p>

<p>来查看相应的包是不是存在，这里也会联网检索，如果找到就代表可以被 Conda 安装。</p>

<p><code>
conda install --name bunnies beautifulsoup4
</code>
这个命令将<code>beautifulsoup4</code>安装到<code>bunnies</code>环境中。</p>

<p>当然你也可以从 Anaconda.org 安装软件包。Anaconda.org 是配套的一个 Python 软件包库，所以可以很方便地从那里安装需要的软件包。你可以先登陆到 <a href="http://anaconda.org">http://anaconda.org.</a>搜索下是不是存在你需要的包。如果存在使用如下命令安装:</p>

<p><code>
conda install --channel https://conda.anaconda.org/pandas bottleneck
</code></p>

<p>当然你也可以用 <code>pip</code> 安装，如果你习惯了 <code>pip</code> 的话。</p>

<p>比如</p>

<p><code>
pip install numpy
</code></p>

<h1 id="section-3">后记</h1>

<p>这里其实就是 Anaconda 官网提供的<a href="http://conda.pydata.org/docs/test-drive.html">30分钟快速入门</a>的学习笔记， Anaconda可以做的更多比如打包你的程序方便别人使用，和 IDE 联合使用等等。当然还有一个比较绝的就是和 R 联合使用把 R 作为 Python 的拓展，这个正是非常好用的功能。简单的统计功能完全不需要熟悉 Python 全部交给 R 就行。这些都可以在官网得到更加详细的资料。</p>

<p>欢迎大家斧正。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[公务员考试资料——人民时评的下载和音频制作]]></title>
    <link href="http://iphyer.github.com/blog/2014/10/30/guokao/"/>
    <updated>2014-10-30T22:50:00+08:00</updated>
    <id>http://iphyer.github.com/blog/2014/10/30/guokao</id>
    <content type="html"><![CDATA[<h1 id="section">任务概述</h1>

<p>人民时评是公务员考试常用的资料之一，具体可以参考这里<a href="http://mp.weixin.qq.com/s?__biz=MzAxMzA2MTk0NQ==&amp;mid=200845445&amp;idx=1&amp;sn=7fb529e6aa6db2cb6a9bd5cf1a4ee696&amp;scene=1&amp;from=singlemessage&amp;isappinstalled=0&amp;key=b04a2d1c413a2c78b94c9feccabd9f20aea549c22664e132369f53cb976edabd39b2b3fdcfd712fa617d6be224990c1f&amp;ascene=1&amp;uin=Mjc2ODM3MjM4MQ%3D%3D&amp;devicetype=android-18&amp;version=26000036&amp;pass_ticket=GBG6U7bQNQ06ds4qYYZR4saibKPj%2F%2FQjOZXYqLxmmZWXhPIdeRa9Ye0n2zcBSG5o">独家丨国考申论不抓瞎，人民时评帮你押</a>
，虽然我不考这个考试，但是需要实现这个需求。</p>

<p>主要是从人民时评的网站上把内容抓取下来，然后制作成音频，这样就可以你用边角料时间多听一听练习写作了。
主要目的是帮助熟悉表达和观点。</p>

<p>这个任务本来以为挺简单的结果花费了一天的时间才结束。</p>

<!--more-->

<p>真的挺累人的。</p>

<h1 id="section-1">过程</h1>

<h2 id="section-2">网页内容抓取</h2>

<p>这部分比较简单，人民网有一个总结地址在这里<a href="http://opinion.people.com.cn/GB/8213/49160/49219/index2.html">人民时评</a></p>

<p>代码倒是挺简洁的，结构也很清晰，都是用表格排列的内容，所以很轻松的使用Python实现了抓取。</p>

<pre><code>
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 30 11:14:57 2014

@author: famer
"""

# 这个u程序实现从人民时评的网站上抓取内容并且存为TXT文件格式
# 这里抓取从2014年10月30日03:20-2013年06月06日04:10的人民时评
# 参考了http://www.zh30.com/python-threading-pachong1.html的代码

import urllib2
from bs4 import BeautifulSoup


#参数设定
urllinkmain="http://opinion.people.com.cn"

#打开网页并且获得内容，输出soup整理后内容，输入网页地址
#请注意网页编码的问题

def webpageget(weblink):
    request = urllib2.Request(weblink)
    request.add_header('User-agent', 'Mozilla/5.0 (Linux i686)')
    response = urllib2.urlopen(request)
    websoup=BeautifulSoup(response,from_encoding="GB2312")
    return websoup    


#下载程序
#地址设置，因为比较少就直接使用硬编码了
#url="http://opinion.people.com.cn/GB/8213/49160/49219/"
#url="http://opinion.people.com.cn/GB/8213/49160/49219/index2.html"
url="http://opinion.people.com.cn/GB/8213/49160/49219/index3.html"
#解析网页
soup=webpageget(url)
alink= soup.find_all('a', attrs={'class':'abl'})
for a in alink:
    link=a.get('href')
    name=a.get_text()+'.txt'
    fh=open(name,'a+')
    urltemp=urllinkmain+link
    newsoup=webpageget(urltemp)
    div=newsoup.find_all('div',attrs={'id':'p_content'})
    for p in div:
        ptemp=p.get_text()
        fh.write(ptemp)
    fh.close()

print  'Done'

</code></pre>

<h2 id="section-3">文字转化为声音</h2>

<p>这步真的是大坑。以前没有做过类似的工作，光是评估各个语音引擎的好坏就花去了好多时间。好不容易找到一个特别合适的语音转换软件，Linux下的我都仔细总结了下，英文的还勉强凑合，但是中文的这是一塌糊涂。所以果断换成了windows下实现。然后就发现了<a href="http://www.cross-plus-a.com/cn/balabolka.htm">Balabolka</a>。神器啊，还支持批量转换。终于在windows下完美实现了这个过程。</p>

<p>如图:</p>

<p><img src="/images/TTS/Balabolka.PNG" alt="tu１" /></p>

<p>主要是强烈推荐这个软件，　免费 (Freeware)软件做的这么好，不顶一下实在是对不起啊！</p>

<h2 id="section-4">修正</h2>

<p>但是我一开始是使用的TXT格式，而在Linux下生成的文件在Windows非常不爽而且对于<a href="http://www.cross-plus-a.com/cn/balabolka.htm">Balabolka</a>这样专门为Windows设计的软件而言非常容易出错，所以就想到了批量转换为word文件。这样可以方便在Windows下使用。</p>

<p>最后发现了unoconv,非常好的一个软件。unoconv is a command line utility that can convert any file format that　LibreOffice can import, to any file format that LibreOffice is capable　of exporting.</p>

<p>简单地说，unoconv实现了使用LibreOffice来生成word文档的功能。</p>

<p>一个命令行全部实现</p>

<pre><code>
unoconv -f doc *.txt^C

</code></pre>

<p>然后就是用word实现了全部的功能。</p>

<p>当然最后还是会有些幺蛾子，比如人民时评的网页版有的时候会有视频。。。坑爹。</p>

<p>所以最后还需要对于word文档做一些修正。这个就是非常dirty的work了。没办法只能手工实现。还好最后是成功实现了。</p>

<h1 id="section-5">人民视频文本和音频下载</h1>

<p><a href="http://pan.baidu.com/s/1sj2Tp1b">下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[心理现象]]></title>
    <link href="http://iphyer.github.com/blog/2014/04/19/new/"/>
    <updated>2014-04-19T01:56:00+08:00</updated>
    <id>http://iphyer.github.com/blog/2014/04/19/new</id>
    <content type="html"><![CDATA[<h1 id="python">关于单词出现频率的Python统计——一个心理现象的验证</h1>

<h2 id="section">起源</h2>

<p>这是《选择悖论》的一个例子，就是人的心理是受到各种因素影响的，比如可获得性启发式(availability heuristic)往往就是人类大脑和心理缺陷的原因之一。</p>

<p>如果我们可以很容易地捕捉到记忆中的某些信息，我们就认为我们过去经常碰到某些信息，并且某些信息是正确的和经常出现的。 这是由一定道理的，因为事物出现的频率会影响我们的记忆的可获得性但是这不是唯一因素。显著性或者生动性也会影响我们的记忆的可获得性。 比如，人们往往会认为： “以T开头的单词比ｔ排在第三位的单词多”——记忆的可获得性差异，因为自己的记忆更加容易提取，所以认为经常发生。</p>

<p>这里我想验证一下：“以T开头的单词比t排在第三位的单词多”——这个是不是真的。</p>

<!--more-->

<h2 id="section-1">设立语料库</h2>

<p>为了验证这个结论，我们必须建立一个语料库，上网查了下，觉得”British National corpus”BNC。</p>

<p>当然这里我选择只是单单的一个简单的词典，网上有很多的下载的“BNC最常用15000词汇”大家可以自行下载。</p>

<h2 id="section-2">程序</h2>

<p>有了语料库就可以写程序分析啦。具体代码如下：</p>

<pre><code># -*- coding: utf-8 -*-
"""
Created on Tue Apr  8 21:47:00 2014

@author: famer
"""
#word frequency analysis
#count words, unique words, common wrods
#here we want to do word frequence analysis of a dict

import string
import re

def processLine(line,wcDict_T,wcDict_T2):
    #cut the whitespace before and after everyline
    #sitll use strip method to seperate different words
    wordlist=line.strip().split()
    for word in wordlist:
        if re.match(r'\At',word):
            word=word.lower()
            word=word.strip()
            word=word.strip(string.punctuation)
            addword(word,wcDict_T)
        elif re.match(r'\D\Dt',word):
            word=word.lower()
            word=word.strip()
            word=word.strip(string.punctuation)
            addword(word,wcDict_T2)

def addword(w,wcDict):
    if w in wcDict:
        wcDict[w]+=1
    else:
        wcDict[w]=1

#main programe
wcDict_1={}
wcDict_2={}
fObj=open("15000.txt",'r')
for line in fObj:
    processLine(line,wcDict_1,wcDict_2)
print 'Length of the wcDict_1 is:', len(wcDict_1)
print 'Length of the wcDict_2 is:', len(wcDict_2)
print 'Done'
</code></pre>

<h2 id="section-3">结果</h2>

<p>最后的结果为：</p>

<pre><code>Length of the wcDict_1 is: 720
Length of the wcDict_2 is: 1041
Done
</code></pre>

<p>可以看到确实“以T开头的单词比ｔ排在第三位的单词多”这只是记忆的可获得性差异带来的一个幻觉罢了。</p>

<p>你是不是有记忆的可获得性差异导致的经历呢？</p>
]]></content>
  </entry>
  
</feed>
