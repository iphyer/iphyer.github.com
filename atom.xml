<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[桑弧蓬矢射四方]]></title>
  <link href="http://iphyer.github.com/atom.xml" rel="self"/>
  <link href="http://iphyer.github.com/"/>
  <updated>2018-05-18T16:08:18-05:00</updated>
  <id>http://iphyer.github.com/</id>
  <author>
    <name><![CDATA[iphyer]]></name>
    <email><![CDATA[iphyer@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用矩阵操作快速实现图像识别中 Bounding Box 的准确率和召回率判断]]></title>
    <link href="http://iphyer.github.com/blog/2018/04/30/matrix/"/>
    <updated>2018-04-30T16:52:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2018/04/30/matrix</id>
    <content type="html"><![CDATA[<h2 id="section">起因</h2>

<p>今天和同学一切讨论我们在做的项目，其中他特别指出了一段 Python 代码的精妙之处。我当时没能立刻理解，回来仔细思考了多次，终于想明白了这个问题，不由拍案叫绝。所以特地总结下这个问题给出自己的思考。</p>

<!--more-->

<h2 id="section-1">背景</h2>

<h3 id="section-2">像素坐标系</h3>

<p>我们都知道，计算机图像是由像素点组成的。简单化的理解，忽略各种格式的区别，就是红色，绿色，蓝色三个通道的二维矩阵组合。一个通道是一个矩阵，这样在屏幕上，同一个像素点，三种颜色的混合就组成了一幅彩色图像。如下图所示</p>

<p><img src="http://iphyer.github.com/images/ComputerVision/pixelCoordinate.png" alt=" from cs239n by Fei-Fei Li,Justin Johnson,Serena Yeung" /></p>

<p>人看到的是色彩斑澜的图像，计算机看到的其实是一个填充了数字的矩阵。</p>

<h3 id="bounding-box">Bounding Box</h3>

<p>在图像识别的时候很重要的一个工作是通过 Bounding Box 把图像的大致区域框出来。在这一步并不需要每一个像素都精确区分，而是大致框出物体的范围。如下图所示：</p>

<p><img src="http://iphyer.github.com/images/ComputerVision/BoundingBox.png" alt="Bounding Box" /></p>

<p>那么问题来了，怎么表示这个 Bounding Box？</p>

<p>需要画出边框上的每个点吗？ 显然不需要。</p>

<p>那最少需要几个？可以发现四个顶点是最特殊的，那四个都必须吗？显然也不需要。</p>

<p>最少我们只需要不是共线的两个顶点就行了，也就是互为对角线的顶点都可以。</p>

<p>习惯上我们取左上的点和右下的点（从人的角度看，暂时不考虑像素坐标系的方向问题）。</p>

<h3 id="section-3">图像识别算法</h3>

<p>如上面的 Bounding Box 图所示，其实图像识别算法就是对于任意一个输入的图像，考察是不是准确地预测出了 Bounding Box 的所在位置。当然为了让算法可以知道怎么学习，我们往往会事先通过 Bounding Box 标记出图像的位置，然后训练神经网络去通过学习图像的各种特征预测可能出现的Bounding Box 位置。</p>

<p>简单说，我们先标记一些 Bounding Box 然后我们的算法通过学习训练，最后实现对于一张未知图像的 Bounding Box 的预测。</p>

<h3 id="precision--recall">precision(准确率) 和 recall(召回率)</h3>

<p>这里就会有一个很自然的问题，我们怎么知道预测的准确还是不准确呢？</p>

<p>通常在机器学习算法中我们使用两个指标来表示算法的性能，precision(准确率) 和 recall(召回率)。简单说，用疾病检测举例，如果在 10000 人的检测样本中已知有 500 个阳性的病人需要预测出来，现在你设计了一个算法，预测了 400 个人是阳性，但是实际上这四百人里面只有 300 人是真的阳性（预测对了），其中 100 个人是阴性（预测错了）。所以你的准确率就是，基于你预测的 400 人，因为有 300 人是对的，所以准确率是 300 / 400 = 0.75。 换句话说准确率就是你预测的所有结果中有多少是对的。</p>

<p>召回率表示的是你预测的结果中对的部分到底覆盖了多少目标用户，可以看到我们的目标是预测出 500 个阳性病人，但是你预测的 400 人中只有 300 个是对的，所以你的召回率就是 300 / 500 = 0.6。简单说，召回率就是覆盖率，我们希望的好的算法能够在预测的时候覆盖更多的目标人群。</p>

<p>极端情况，如果你只预测一个人，同时这个人还是真是阳性，可以看到 准确率是 1 / 1 = 100%， 但是你的召回率只有 1/ 500 = 0.002 非常低。</p>

<p>另外的极端情况就是，你说所有人都是阳性病人，那么召回率就是 1。因为你把所有病人都包括了，你预测对的人是 500，同时你期望的目标人群是500， 500 / 500 = 1。换句话说，通过非常极端严格的筛查条件，宁可错误绝不放过，你成功实现了全覆盖。但是你的准确率低得令人发指，只有 500 / 10000 = 0.05。</p>

<p>所以在日常的使用中，我们往往是需要综合两个指标的。比较自然的指标有 F1 分数等。有兴趣的读者可以自行研究。</p>

<h2 id="section-4">问题</h2>

<h3 id="section-5">问题的提出</h3>

<p>我们集中到今天讨论的问题上，</p>

<blockquote>
  <p>假设对于某个图像，我的算法提出了自己预测的 N 个 Bounding Box，同时知道该图像的 M 个正确的 Bounding Box， 如何准备快速的计算 precision(准确率) 和 recall(召回率)？</p>
</blockquote>

<p>下面我给出问题的预备代码和画图代码帮助大家理解这个问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class="line">
</span><span class="line"><span class="c"># create array data</span>
</span><span class="line">
</span><span class="line"><span class="n">predict</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
</span><span class="line">                   <span class="p">[</span><span class="mf">4.5</span><span class="p">,</span><span class="mf">2.5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
</span><span class="line">                   <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">]],</span> <span class="n">np</span><span class="o">.</span><span class="n">double</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">truth</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
</span><span class="line">                   <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">]],</span> <span class="n">np</span><span class="o">.</span><span class="n">double</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Below is to show the layout of the problem</span>
</span><span class="line"><span class="c"># red represents truth</span>
</span><span class="line"><span class="c"># blue represents prediction</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib.patches</span> <span class="kn">as</span> <span class="nn">patches</span>
</span><span class="line"><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class="line"><span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span> <span class="n">aspect</span><span class="o">=</span><span class="s">&#39;equal&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">recList</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Adding blue rectangle from predict</span>
</span><span class="line"><span class="k">for</span> <span class="n">rect</span> <span class="ow">in</span> <span class="n">predict</span><span class="p">:</span>
</span><span class="line">    <span class="n">recList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span><span class="line">        <span class="n">patches</span><span class="o">.</span><span class="n">Rectangle</span><span class="p">(</span>
</span><span class="line">            <span class="p">(</span><span class="n">rect</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">rect</span><span class="p">[</span><span class="mi">3</span><span class="p">]),</span>
</span><span class="line">             <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">rect</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="n">rect</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class="line">             <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">rect</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="n">rect</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
</span><span class="line">             <span class="n">fill</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class="line">             <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">&quot;blue&quot;</span>
</span><span class="line">        <span class="p">)</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Adding red rectangle for truth</span>
</span><span class="line"><span class="k">for</span> <span class="n">rect</span> <span class="ow">in</span> <span class="n">truth</span><span class="p">:</span>
</span><span class="line">    <span class="n">recList</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span><span class="line">        <span class="n">patches</span><span class="o">.</span><span class="n">Rectangle</span><span class="p">(</span>
</span><span class="line">            <span class="p">(</span><span class="n">rect</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">rect</span><span class="p">[</span><span class="mi">3</span><span class="p">]),</span>
</span><span class="line">             <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">rect</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="n">rect</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class="line">             <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">rect</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="n">rect</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
</span><span class="line">             <span class="n">fill</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class="line">             <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">&quot;red&quot;</span>
</span><span class="line">        <span class="p">)</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># plot the graph</span>
</span><span class="line"><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">recList</span><span class="p">:</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">add_patch</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">()</span>
</span><span class="line"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class="line"><span class="n">fig</span><span class="o">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">&#39;rect.png&#39;</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">90</span><span class="p">,</span> <span class="n">bbox_inches</span><span class="o">=</span><span class="s">&#39;tight&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>具体的图像如下；</p>

<p><img src="http://iphyer.github.com/images/ComputerVision/rect.png" alt="Bounding Box Layout" /></p>

<p>同时我们做一个简化，<strong>只考虑每个矩阵中心是不是在可以接受的误差范围内重合</strong>。相当于我们暂时只考虑位置不考虑大小。因为大小往往还会做后续的精细调节。大部分算法首先预测位置，然后大小到了需要的时候再进一步的细化。</p>

<p>计算中心可以使用如下的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">Calculate the center point of bounding box</span>
</span><span class="line"><span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">bbox2centroid</span><span class="p">(</span><span class="n">bboxes</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">column_stack</span><span class="p">(((</span><span class="n">bboxes</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">bboxes</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">bboxes</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">bboxes</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-6">问题的思路</h3>

<p>一个简单的思路就是逐个比较。这样的话你的算法需要写大量的循环非常费力。</p>

<p>所以，在实际的工作中，我们大量使用矩阵操作，避免循环。因为矩阵操作往往可以避免循环，同时如果你能够使用 GPU （通常图像识别都会在 GPU 上运行），矩阵操作本身是经过特别优化的，特别适合 GPU 运行，这可以提高速度。</p>

<p>但是怎么操作？</p>

<p>可以看到我特地给出了，预测 Bounding Box 数量和真实 Bounding Box 数量不一致的情况，所以这个时候如果不小心，非常容易出现矩阵的维度不匹配的情况那就毁掉了所有的计算。</p>

<p>所以我们可以用上面的例子来帮助思考，首先求中心的坐标，这样，原来的 $ N \times 4 $ 矩阵和 $ M \times 4 $ 矩阵就变成了
$ N \times 2 $ 矩阵和 $ M \times 2 $ 矩阵。</p>

<h4 id="numpy--numpynewaxis"><code>numpy</code> 的 <code>numpy.newaxis</code></h4>

<p>这儿不得不说下，一个不太提及的小技巧。</p>

<p>在 <code>numpy</code> 中 <code>None</code> 也可以作为矩阵一个新的维度的占位符。用官方文档的说法，这叫做 <code>numpy.newaxis</code></p>

<blockquote>
  <p>The newaxis object can be used in all slicing operations to create an axis of length one. :const: newaxis is an alias for ‘None’, and ‘None’ can be used in place of this with the same result.</p>
</blockquote>

<p>也就是如果你希望你的矩阵拓展出一个新的维度，比如从一个长度为 3 的 vector 到 3 x 1 或者 1 x 3 你就可以这么写</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">A</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;====1====&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[:,</span><span class="bp">None</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[:,</span><span class="bp">None</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;====2====&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="bp">None</span><span class="p">,:])</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="bp">None</span><span class="p">,:]</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[</span>1 3 5<span class="o">]</span>
</span><span class="line"><span class="o">(</span>3,<span class="o">)</span>
</span><span class="line"><span class="o">====</span><span class="nv">1</span><span class="o">====</span>
</span><span class="line"><span class="o">[[</span>1<span class="o">]</span>
</span><span class="line"> <span class="o">[</span>3<span class="o">]</span>
</span><span class="line"> <span class="o">[</span>5<span class="o">]]</span>
</span><span class="line"><span class="o">(</span>3, 1<span class="o">)</span>
</span><span class="line"><span class="o">====</span><span class="nv">2</span><span class="o">====</span>
</span><span class="line"><span class="o">[[</span>1 3 5<span class="o">]]</span>
</span><span class="line"><span class="o">(</span>1, 3<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么二维呢，新增加一个维度，用上面的写法，我们可以看到结果是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">A</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
</span><span class="line">            <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;====1====&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[:,</span><span class="bp">None</span><span class="p">])</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[:,</span><span class="bp">None</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="s">&quot;====2====&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="bp">None</span><span class="p">,:])</span>
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="bp">None</span><span class="p">,:]</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[[</span>1 3 5<span class="o">]</span>
</span><span class="line"> <span class="o">[</span>7 8 9<span class="o">]]</span>
</span><span class="line"><span class="o">(</span>2, 3<span class="o">)</span>
</span><span class="line"><span class="o">====</span><span class="nv">1</span><span class="o">====</span>
</span><span class="line"><span class="o">[[[</span>1 3 5<span class="o">]]</span>
</span><span class="line">
</span><span class="line"> <span class="o">[[</span>7 8 9<span class="o">]]]</span>
</span><span class="line"><span class="o">(</span>2, 1, 3<span class="o">)</span>
</span><span class="line"><span class="o">====</span><span class="nv">2</span><span class="o">====</span>
</span><span class="line"><span class="o">[[[</span>1 3 5<span class="o">]</span>
</span><span class="line">  <span class="o">[</span>7 8 9<span class="o">]]]</span>
</span><span class="line"><span class="o">(</span>1, 2, 3<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样在 <code>numpy</code> 的操作中，如果需要增加一个额外的维度，比如存储两个矩阵做差的结果，就可以很方便将结果存储在新增加的这个维度，后面会更进一步解释。</p>

<p>也可以参考这个stackoverflow<a href="https://stackoverflow.com/questions/37867354/in-numpy-what-does-selection-by-none-do/37867542">In numpy, what does selection by [:,None] do?</a></p>

<h3 id="section-7">问题的解决代码</h3>

<p>这里我直接先给出代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">Calculating P and R function</span>
</span><span class="line"><span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">compute_score_detail_by_centroid</span><span class="p">(</span><span class="n">pred_bbox</span><span class="p">,</span> <span class="n">gt_bbox</span><span class="p">,</span> <span class="n">tolerence</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)):</span>
</span><span class="line">    <span class="n">pred_c</span> <span class="o">=</span> <span class="n">bbox2centroid</span><span class="p">(</span><span class="n">pred_bbox</span><span class="p">)</span>
</span><span class="line">    <span class="n">gt_c</span> <span class="o">=</span> <span class="n">bbox2centroid</span><span class="p">(</span><span class="n">gt_bbox</span><span class="p">)</span>
</span><span class="line">    <span class="n">diffs</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">pred_c</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">]</span> <span class="o">-</span> <span class="n">gt_c</span><span class="p">)</span>
</span><span class="line">    <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nonzero</span><span class="p">((</span><span class="n">diffs</span> <span class="o">&lt;</span> <span class="n">tolerence</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">    <span class="n">precision</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">pred_bbox</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">recall</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">gt_bbox</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">precision</span><span class="p">,</span> <span class="n">recall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面一步步解释下这个函数</p>

<p>(1) <code>pred_c = bbox2centroid(pred_bbox)</code> 和 <code>gt_c = bbox2centroid(gt_bbox)</code> 就是求 Bounding Box 的中心，在我们的例子中，做完这步操作， <code>pred_c</code> 是 $ 3 \times 2 $ 矩阵 而 <code>gt_c</code> 是 $ 2 \times 2 $ 矩阵。</p>

<p>其中 <code>pred_c</code>是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[[</span>1.5  1.5 <span class="o">]</span>
</span><span class="line"> <span class="o">[</span>3.25 1.75<span class="o">]</span>
</span><span class="line"> <span class="o">[</span>7.   5.  <span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>gt_c</code>是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[[</span>2.  3.5<span class="o">]</span>
</span><span class="line"> <span class="o">[</span>6.5 1.5<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2) <code>pred_c[:, None]</code> 将 $ 3 \times 2 $ 矩阵 扩展为 $ 3 \times 1 \times 2 $ 矩阵</p>

<p>(3) <code>pred_c[:, None] - gt_c</code> 是  $ 3 \times 1 \times 2 $ 矩阵 减去 $ 2 \times 2 $ 矩阵， 在数学上这是没有定义的，因为数学要求矩阵减法操作必须维度相同，但是在 <code>numpy</code> 中，其实是把 $ 3 \times 1 \times 2 $ 矩阵作为 3 个 $ 1 \times 2 $ 矩阵分别先扩充为 $ 2 \times 2 $ 矩阵 再和$ 2 \times 2 $ 的 <code>gt_c</code> 矩阵做减法。</p>

<p>也就是<code>numpy</code> 尽力将不能做的减法操作以第一个维度（你也可以指定其他维度）做减法操作。</p>

<p>所以这步结束我们得到一个  $ 3 \times 2 \times 2 $ 矩阵，沿着第一个维度，其中每一个小的 $ 2 \times 2 $ 矩阵都是预测的 Bounding Box 和真实的 Bounding Box 的中心差值。</p>

<p>具体的结果如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">[[[</span><span class="mf">0.5</span>  <span class="mf">2.</span>  <span class="p">]</span>
</span><span class="line">  <span class="p">[</span><span class="mf">5.</span>   <span class="mf">0.</span>  <span class="p">]]</span>
</span><span class="line">
</span><span class="line"> <span class="p">[[</span><span class="mf">1.25</span> <span class="mf">1.75</span><span class="p">]</span>
</span><span class="line">  <span class="p">[</span><span class="mf">3.25</span> <span class="mf">0.25</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"> <span class="p">[[</span><span class="mf">5.</span>   <span class="mf">1.5</span> <span class="p">]</span>
</span><span class="line">  <span class="p">[</span><span class="mf">0.5</span>  <span class="mf">3.5</span> <span class="p">]]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果还是有一些疑问的话，请一行行调试如下的代码，我简单加了输出信息，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">Calculating P and R function</span>
</span><span class="line"><span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">compute_score_detail_by_centroid</span><span class="p">(</span><span class="n">pred_bbox</span><span class="p">,</span> <span class="n">gt_bbox</span><span class="p">,</span> <span class="n">tolerence</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)):</span>
</span><span class="line">    <span class="n">pred_c</span> <span class="o">=</span> <span class="n">bbox2centroid</span><span class="p">(</span><span class="n">pred_bbox</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">pred_c</span><span class="p">)</span>
</span><span class="line">    <span class="n">gt_c</span> <span class="o">=</span> <span class="n">bbox2centroid</span><span class="p">(</span><span class="n">gt_bbox</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">gt_c</span><span class="p">)</span>
</span><span class="line">    <span class="n">diffs</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">pred_c</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">]</span> <span class="o">-</span> <span class="n">gt_c</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">diffs</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">diffs</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span><span class="line">    <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nonzero</span><span class="p">((</span><span class="n">diffs</span> <span class="o">&lt;</span> <span class="n">tolerence</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">    <span class="k">print</span><span class="p">((</span><span class="n">diffs</span> <span class="o">&lt;</span> <span class="n">tolerence</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">nonzero</span><span class="p">((</span><span class="n">diffs</span> <span class="o">&lt;</span> <span class="n">tolerence</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="mi">2</span><span class="p">)))</span>
</span><span class="line">    <span class="n">precision</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">pred_bbox</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="n">recall</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">gt_bbox</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">precision</span><span class="p">,</span> <span class="n">recall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(4) <code>(diffs &lt; tolerence).all(2)</code> 这步就是把上面求出来的 $ 3 \times 2 \times 2 $ 矩阵 和 我们允许的误差矩阵(<code>(2, 2)</code>)做比较，如果小于误差计作<code>True</code>，否则计作 <code>False</code>。但是这样结束之后我们得到一个$ 3 \times 2 \times 2 $ 的布尔(Boolean)矩阵。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[[[</span> True False<span class="o">]</span>
</span><span class="line">  <span class="o">[</span>False  True<span class="o">]]</span>
</span><span class="line">
</span><span class="line"> <span class="o">[[</span> True  True<span class="o">]</span>
</span><span class="line">  <span class="o">[</span>False  True<span class="o">]]</span>
</span><span class="line">
</span><span class="line"> <span class="o">[[</span>False  True<span class="o">]</span>
</span><span class="line">  <span class="o">[</span> True False<span class="o">]]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>分别表示对于每一个预测的  Bounding Box ，它的 x 中心和 y 中心是不是在允许的误差范围内。我们知道如果都在范围内，那么就是预测对了，反之只要一个不对，那就是预测不对。</p>

<p>所以<code>.all(2)</code> 其实就是沿着第三个轴（Python从0计数）对于每一个元素是不是都是<code>True</code>，<code>Test whether all array elements along a given axis evaluate to True.</code></p>

<p>那么第三个轴是哪个轴？</p>

<p>其实在我们说 差值布尔矩阵是 $ 3 \times 2 \times 2 $ 矩阵 就说明了第三个元素是第二个 2 ，也就是对于布尔矩阵沿着每个小列做操作。正好就是对于每个x轴中心误差和y轴中心误差做逻辑<code>AND</code>操作。通过这个操作之后，我们发现现在布尔矩阵变成，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">[[</span>False False<span class="o">]</span>
</span><span class="line"> <span class="o">[</span> True False<span class="o">]</span>
</span><span class="line"> <span class="o">[</span>False False<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>现在是 $ 3 \times 2 $ 的矩阵了，相当于沿着第三个轴塌缩了。</p>

<p>现在的结果就是，对于我们的每一个预测(一共 3 个预测)我们分别和真实值( 两个真实值 )做对比，得到一个判断结果分别是 <code>True</code> 还是<code>False</code>，我们可以看到第二个预测 Bounding Box 和第一个真实 Bounding Box 是吻合的。结合我们的图，会发现正好是右下角重合的两个矩形。</p>

<p><img src="http://iphyer.github.com/images/ComputerVision/rect.png" alt="Bounding Box Layout" /></p>

<p>(4) <code>x1, x2 = np.nonzero((diffs &lt; tolerence).all(2))</code> 主要需要理解<code>np.nonzero()</code>,其实就是返回每一个维度的非零元素，在我们这个布尔矩阵中就是返回每个维度的<code>True</code>数目。<code>Return the indices of the elements that are non-zero.Returns a tuple of arrays, one for each dimension of a, containing the indices of the non-zero elements in that dimension.</code></p>

<p>但是在这儿<code>x1</code>和<code>x2</code>的含义不太明确。所以下面我进行一次形式化的论证。</p>

<p>可以看到在得到中心坐标后，我们的问题是</p>

<blockquote>
  <p>$ N \times 2 $ 的预测矩阵和 $ M \times 2 $ 真实值矩阵的差是不是在允许的范围内。</p>
</blockquote>

<p>所以在扩展一个维度后，变成$ N \times 1 \times 2 $ 的扩展预测矩阵和 $ M \times 2 $ 真实值矩阵做差。然后对于每一个预测 Bounding Box 的中心，一共是$ N $ 个，在新扩展的维度上和 $ M \times 2 $ 真实值矩阵做差。所以每一个预测 Bounding Box 的中心 ( $ 1 \times 2 $ ) 先扩展成 $ M \times 2 $,就是把单一行复制为 $ M $行,得到每行元素相同的一个 $ M \times 2 $ 矩阵, 再和 $ M \times 2 $ 真实值矩阵做差。</p>

<p>所以我们到的布尔矩阵是 $ N \times M \times 2 $ 的矩阵，其中第三个轴的第一个布尔元素代表 X 方向是不是在误差内，第二个布尔元素代表 Y 方向是不是在误差范围内，然后再沿着第三个轴做<code>all</code>操作，所以我们得到 $ N \times M $ 的矩阵,其中每一行都是代表一个预测 Bounding Box 的中心 是不是和 $ M $ 个真实 Bounding Box 的中心重合。</p>

<p>所以 <code>x1</code> 得到<code>N</code>中的<code>True</code>数目而<code>x2</code>得到<code>M</code>中的<code>True</code>数目。所以结合上面 precision(准确率) 和 recall(召回率) 的定义，我们知道 <code>x1</code> 就是 precision(准确率) 而 <code>x2</code>就是 recall(召回率)。</p>

<p>当然为了得到具体的数值，还需要做进一步求解，不过已经非常简单了, 也就是最后的几步。</p>

<h2 id="section-8">总结</h2>

<p>可以看到这个对于这样一个简单的问题，通过充分利用 <code>numpy</code> 内置函数的特性和矩阵操作的便利，特别是增加一个维度实现对于另一个矩阵的遍历实现具体的机器学习precision(准确率) 和 recall(召回率) 计算。</p>

<p>这是特别值得学习的操作。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[欲渡黄河冰塞川 将登太行雪满山]]></title>
    <link href="http://iphyer.github.com/blog/2018/04/30/eslspeaking/"/>
    <updated>2018-04-30T16:26:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2018/04/30/eslspeaking</id>
    <content type="html"><![CDATA[<h2 id="section">起因</h2>

<p>最近很多事情尘埃落定，很多事情不得不继续前行。写一篇总结纪念下这个重要的日子。</p>

<!--more-->

<p>看着同学们都开始博士毕业感觉还是很难过的，现在其实最大的困难并不是条件而是内心的挣扎。毕竟迟了这么久，折腾了这么久，前路漫漫，长夜无穷，内心的沮丧实在是太强烈了。</p>

<h2 id="section-1">心理总结</h2>

<p>不过人生还是不得不继续前行，说白了博士不是人生的必需品，我们最终的目的无论如何还是要活好这一生。</p>

<p>或许人生并不是那么一帆风顺，但是我们没有任何人能保证一帆风顺，有时候很多时候都是不得不艰难求存吧。</p>

<p>很多事情，从不同的角度看有不同的观点，也有不同的意见。</p>

<p>很多事情，成功与否其实和个人没关系，往往是别人的问题，或者有心，或者无意，在一个普遍联系的世界里，你的一举一动谈不上左右所有人的视线，但是往往还是可以打动改变一些事情或者改变某个状态。</p>

<p>不要把自己看得太重也不要把自己看得太轻，很多时候往往坚持一下说不定就会变好，当然往往坚持了也就释然了。时间不能改变所有事情但是还是可以改变不少的。</p>

<h2 id="section-2">计划</h2>

<h3 id="section-3">科研</h3>

<p>其实写下科研的时候，自己都感到脸红，真是让人羞愧，一事无成，各种挫折。这个博士读得一波三折。</p>

<p>但是还是要写下来，毕竟还是喜欢研究，喜欢那种智商的高级感（也是一种虚荣心吧，寡人有疾，我就是觉得科研很好）。</p>

<p>暑假争取：</p>

<ol>
  <li>实现模型精度的提高</li>
  <li>完成多类型探测 ：(1) 数据标注 (2) 模型建设</li>
  <li>继续学习 Deep Learning </li>
</ol>

<h3 id="section-4">刷题</h3>

<p>Leetcode 现在才 30 题，争取暑假结束，刷完第一遍。保证对于 easy 和 medium 的掌握。</p>

<h3 id="section-5">上课</h3>

<p>现在看来主要是三门课</p>

<ol>
  <li>Stanford : cs329n，结合 Youtube</li>
  <li>UW-Madison : cs354, 结合 Youtube</li>
  <li>UW-Madison : cs 577</li>
  <li>UW-Madison : cs 537 </li>
</ol>

<p>主要目的就是加快求学的速度，尽量学习更多的知识，说起来学校的环境确实是好，非常适合提高自己。</p>

<h2 id="section-6">健身</h2>

<p>暑假也是麦迪逊最好的季节，希望可以完全瘦下来，毕竟体重太高不是好事。</p>

<p>160 lb  是最后的目标。</p>

<h2 id="section-7">口语</h2>

<p>上周一考完了第三次口语考试，终于在不断的挫折后考过了这个考试，当然过程也是很惊险的。</p>

<p>我发现原因也很简单，主要是这学期在 103 的 TA 过程中不断的练习得到了提高，这学期开学的口语考试是我在德州同学家过了半个月去考试的。</p>

<p>说白了，曲不离口，拳不离手，在德州每天都是用汉语交流所以根本没有任何提高。</p>

<p>其实口语确实很重要，毕竟这是你在美国的求生必备技能，我打算下学期要是时间允许就修一门口语课程。至少积极参加口语练习。</p>

<p>当然总结之前的情况，在一个中国人多的组确实没有必要用英语，但是在一个中国人不多的组英语还是很重要的。个人感觉英语还是需要提高的。</p>

<p>打算开发一个软件，能够让你评测自己的口语水平。</p>

<p>说白了，现在开始争取每天抽出时间，至少过一下这学期的 American Accent 教材。</p>

<h2 id="section-8">杂项</h2>

<ol>
  <li>学分转换，尽可能多转学分。</li>
  <li>充实个人项目简历</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修复 AttributeError: module 'pip' has no attribute 'main' in PyCharm]]></title>
    <link href="http://iphyer.github.com/blog/2018/04/20/esl/"/>
    <updated>2018-04-20T23:32:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2018/04/20/esl</id>
    <content type="html"><![CDATA[<h2 id="section">起因</h2>

<p>PyCharm 是我很喜欢的 IDE，最近遇到一个很奇怪的问题 <code>AttributeError: module 'pip' has no attribute 'main'</code>，这里记录下修复过程。</p>

<!--more-->

<h2 id="section-1">原因</h2>

<p>具体的错误情况如下图所示,</p>

<p><img src="http://iphyer.github.com/images/pipDowngrade/problem.jpg" alt="Problems" /></p>

<p>这里的原因其实报错信息都给出了，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;/Applications/PyCharm CE.app/Contents/helpers/packaging_tool.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">192</span><span class="p">,</span> <span class="ow">in</span> <span class="n">main</span>
</span><span class="line">    <span class="n">retcode</span> <span class="o">=</span> <span class="n">do_install</span><span class="p">(</span><span class="n">pkgs</span><span class="p">)</span>
</span><span class="line">  <span class="n">File</span> <span class="s">&quot;/Applications/PyCharm CE.app/Contents/helpers/packaging_tool.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">109</span><span class="p">,</span> <span class="ow">in</span> <span class="n">do_install</span>
</span><span class="line">    <span class="k">return</span> <span class="n">pip</span><span class="o">.</span><span class="n">main</span><span class="p">([</span><span class="s">&#39;install&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">pkgs</span><span class="p">)</span>
</span><span class="line"><span class="ne">AttributeError</span><span class="p">:</span> <span class="n">module</span> <span class="s">&#39;pip&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">&#39;main&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>主要原因就是 <code>pip</code> 找不到 <code>main</code> 属性，谷歌下找到原因，<a href="https://stackoverflow.com/questions/49839610/attributeerror-module-pip-has-no-attribute-main">AttributeError: Module Pip has no attribute ‘main’</a>，原因很简单， <code>pip</code> 版本 10 不支持低版本的属性。相对来说降级 <code>pip</code>  版本。</p>

<h2 id="section-2">解决方案</h2>

<p>解决方案也很简单，只要降级就行了。合适的版本是 <code>pip==9.0.3</code>。</p>

<p>首先找到自己的虚拟环境名称，我用的是 <code>microBlog</code> 所以运行如下命令即可，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">conda install -n microBlog <span class="nv">pip</span><span class="o">=</span>9.0.3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然我这里用的是 <code>conda</code> 作为包管理器。</p>

<p>结果图</p>

<p><img src="http://iphyer.github.com/images/pipDowngrade/sol.jpg" alt="Solved" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用影子数组 ( Shadow Array )加速数组扩容]]></title>
    <link href="http://iphyer.github.com/blog/2018/04/18/array/"/>
    <updated>2018-04-18T18:53:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2018/04/18/array</id>
    <content type="html"><![CDATA[<h2 id="section">起源</h2>

<p>这学期学习数据结构，其中一个概念想了很久，就是影子数组的问题。</p>

<!--more-->

<h2 id="shadow-array">Shadow Array</h2>

<p>影子数组主要的作用是帮助实现在扩增的时候，实现快速的迭代。因为比较难以用语言形容，这里我直接用纸币来解释问题了。</p>

<p>影子数组其实就是就是在每一个数组实现中都同时实现一个两倍于当前数组的数组。这样在实现的时候，每一步都同步拷贝新的元素到影子数组，当当前数组满了的时候直接切换到影子数组，这样实现原来数组满了之后会出现的 O(N) 时间到常数时间。</p>

<p>用下图表示：</p>

<p><img src="http://iphyer.github.com/images/Algo/ShaArr.jpeg" alt="影子数组工作原理" /></p>

<h2 id="current--shadow-">1. 创建 current 和 shadow 两个数组</h2>

<p>我选择 2 作为初始的大小吗，所以 current 的长度是 2 ， shadow 的长度是 4。 </p>

<h2 id="section-1">2. 填充元素</h2>

<p>分别在每一步同时拷贝新元素（1，2）进入 current 和 shadow 两个数组。</p>

<h2 id="section-2">3. 切换数组并建立新数组</h2>

<p>可以看到当当前数组满了之后，我们切换 current 到 shadow，然后重新建立一个两倍大小的心 shadow。原来的 current 会有JVM回收，不用担心。</p>

<p>但是这个时候一个自然的问题，需要拷贝原始元素到新的 shadow 吗？</p>

<p>很显然，新的 shadow 是空的，我们需要拷贝，但是不应该选择一次性到位。因为这样又需要把原数组遍历一边，时间复杂度还是 N (对于添加新元素这步操作而言)。</p>

<h2 id="section-3">4. 添加新元素 并 一次拷贝一个老元素</h2>

<p>可以看到，当添加新元素 3 的时候，除了把 3 拷贝到它所在的位置上，同时我们拷贝了current 数组的第一个元素 1 来填补 shadow 数组缺少的第一个元素。</p>

<p>相应的做操作添加新元素 4。</p>

<p>这时候发现 current 又满了，需要切换了。同时我们发现，因为新的数组始终是两倍扩大，所以其实当空的一般填满了，多复制的旧元素也把新 shadow 补足了。</p>

<h2 id="section-4">5. 切换数组并建立新数组</h2>

<p>这步其实就是说明这个操作的可行性，可以看到当 current 满了，需要切换的时候，每次 shadow 也正好补满。</p>

<p>同时因为每步拷贝做一个添加新元素加上拷贝旧元素的操作，时间复杂度不变还是 O(1) 量级。</p>

<h2 id="section-5">思考</h2>

<p>其实这里最重要的思想就是，不要一曝十寒，要细水长流，把一个宏大的任务分解掉。其实总的操作数不变，但是每一步的 workload 就比较均衡了。</p>

<p>但是，实现这个前提是，你的数据结构比较精巧。</p>

<p>可以看到每次都扩大两倍是最好的选择，如果每次扩大三倍，就不能保证这个操作的完整性和方便性。</p>

<h2 id="section-6">实际工程</h2>

<p>当然上面的结果都是理论的推到，实际中用的每次扩大 2.5 倍而不是 2 倍。</p>

<p>具体</p>

<ul>
  <li>In Java, ArrayList uses x = 3/2.</li>
  <li>In C++, the GCC STL implementation uses x = 2.</li>
</ul>

<p>这个呢，其实没什么道理，只是某种工程实践指导下的选择，因为这样可以降低 resize 的次数。</p>

<p>可以看下下面两篇文章的讲解。</p>

<p><a href="https://stackoverflow.com/questions/21624515/why-java-grows-arraylist-by-3-2?lq=1">Why Java grows ArrayList by 3/2?</a></p>

<p><a href="http://www.codenuclear.com/how-arraylist-works-internally-java/">How ArrayList Works Internally in Java</a></p>

<p><a href="https://lemire.me/blog/2013/02/06/how-fast-should-your-dynamic-arrays-grow/">How fast should your dynamic arrays grow?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[运用R做数据分析]]></title>
    <link href="http://iphyer.github.com/blog/2018/02/09/r/"/>
    <updated>2018-02-09T21:23:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/02/09/r</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>现在看来我还是很早就看到了大数据的潜力，居然 2012 年我就开始了 R 语言的学习。。。</p>

<!--more-->

<h2 id="r">1.什么是R？</h2>

<p>在R的官方教程里是这么给R下注解的:一个数据分析和图形显示的程序设计环境(A system for data analysis and visualization which is built based on S language.)。当然这个解释还是比较难解。笼统的讲，R是一个可以和SPSS，SAS这些商用软件对抗的统计软件。我第一次接触到R就是在2011年暑假，南京大学和Hopkins大学联合举办生物统计的暑期课程。在第一节课上，助教就展示了关于R的用法和思路。虽然那是一个暑假课程但Hopkins大学的老师一样很深入的讲了R的使用。印象最深刻的是关于用R来做基因组序列分析的实验部分。从那以后我对R就很喜欢，甚至很多的实验都是借助R来完成的。</p>

<p>R 其实是Rick Becker,John Chambers 和Allan Wilks 开发的 S 语言的一种实现，这三个人都在贝尔实验室工作，他们合作开发了S语言来进行统计的运算，并且开发了商用的SPLUS。关于R的历史，大家可以google。</p>

<p>简而言之，R是一个开放、开源、共享的软件系统，借助它你可以实现几乎所有的统计和计算工作，甚至有人用R来做模拟和分析。R有着开源软件共有的特点，拓展包多，借助各种拓展包，你可以实现从生物上的基因序列分析到商业上网站访问的聚类分析。同时任何人都可以自由的使用、分享R而不需要担心版权的问题，这大大促进了R的发展。正如Hopkins的老师说的：“Not all people can afford the cost of using SPSS or SAS even though they are easy to start with.” 当然在中国这点并不是特别重要，但是可怕的是如果你和外国同学交流或者你有机会出国的时候却发现没法和大家交流因为你使用的是盗版软件而别人很多在使用开源的软件，你却都没有听说过。更可怕的是当我们环顾图书馆的藏书时候发现好多都是在讲怎么用SPSS和SAS的，老师上课也是这么教同学的，这样的循环是可怕的。因为大家永远也接触不到开源软件的魅力与开源的精神。</p>

<p>同时，或许在医学，商业领域SPSS们可以和R相匹敌，但是在生物统计或者大规模数据分析上R可以说是一骑绝尘，鲜有敌手。因为这些需要高度专门性的领域，R这样可以编程，自由修改的软件系统绝对是适用的。</p>

<h2 id="r-1">2.安装R</h2>

<h3 id="windows">2.1windows环境</h3>

<p>在Google直接输入R，第一个搜索结果就是<a href="http://cran.r-project.org/mirrors.html">R project的官网</a>,选择一个镜像地址访问,下载Precompiled Binary Distributions 中的软件。如果是Windows 用户,可以点击Windows (95 and later),进入base,选择rwxxxx.exe下载，很快就可以下载好，然后安装一般的windows下的安装程序安装，除了语言一般选择默认的配置就可以使用R了。</p>

<p>然后可以下载RStudio这个软件，它可以把R的界面改装成和Matlab类似的界面，工作空间，内存空间，结果和软件包展示区,相当的方便。</p>

<h3 id="linux">2.2Linux环境</h3>
<p>在ubuntu的环境下主要是使用RKWard这样的类似编辑环境，当然在Linux下也是可以用Rstudio的只是要去官网上下载deb的包。也可以直接显示数据同时进行操作，当然也可以使用命令行的模式运行R。</p>

<h2 id="r-2">3.R的语法</h2>

<h3 id="section-1">3.1数据结构</h3>

<p>首先注意，R是大小写敏感的。其次在R中基本的数据结构由</p>

<ul>
  <li>数值型(numeric): 1,1.2,3.1415926</li>
  <li>复数型(complex): 1+2i</li>
  <li>字符型(character): ‘A’/”hello world!”</li>
  <li>逻辑型(logical): TRUE/FALSE</li>
</ul>

<p>R中基本的数据对象为下列五类：</p>

<ol>
  <li>向量(vector)</li>
  <li>矩阵(matrix)</li>
  <li>列表(list)</li>
  <li>数据框(data frame)</li>
  <li>函数(function)</li>
</ol>

<h3 id="section-2">3.2基本类型的操作</h3>

<p>赋值操作为：对于任何一个变量名X1使用下列命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">X1&lt;-c(......)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中c(……)代表一个数据列。比如:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">X1&lt;-c(1,2,3,4)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>就是将数组(1,2,3,4)f赋值给X1.</p>

<p>当然，如果我们从R的数据类型上入手的话，此时我们是生成一个向量。下面演示一个矩阵的生成方法，这个时候很死板的方法是把矩阵一行一行的输入，中间用“,”隔开即可。当然也可以使用比较高级的方法，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">y1&lt;-matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=FALSE)
</span><span class="line">
</span><span class="line">y2&lt;-matrix(1:9,nrow=3,ncol=3,byrow=FALSE)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到两种方法产生的结果<code>y1</code> 和 <code>y2</code> 完全一样。</p>

<p>下面介绍列表。列表最大的特点就是可以实现不同类型的数据可以用同一个变量表示，从而构成不同数据类型的一个变量集合。</p>

<p>比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x&lt;-list(gender=c('F','M'),grade=c(98,100,90),undergrad=TRUE)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的命令是建立一个list的列表，可以看到各个对象的属性并不相同，而且长度也不强行要求一致。</p>

<p>你还可以用下列三个命令输入对于gender进行操作，如：<code>x$gender和x[[1]]</code></p>

<p>最后的一个是要求R告诉x这个变量名有多少变量，如： <code>names(x)</code></p>

<p>下面介绍数据框，数据框是和列表相同的一类数据结构，都可以处理不同类型的数据，但是数据框严格要求各个组成部分的长度相同。比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">y&lt;-data.frame(gender=c('F','M'),grade=c(98,100),undergrad=c(FALSE,TRUE))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的操作，我特意选择了和list相同的内容R直接报错，而在R的内存中可以看到正确的y的数据分布。</p>

<p>希望大家可以知道各种不同的数据结构在内存中具体的逻辑表示，因为不同的数据结构直接决定你在设计不同的数据处理时候的方法。</p>

<h3 id="section-3">3.3数据文件的读写操作</h3>

<p>既然是对于统计数据进行操作，所以肯定离不开具体的对于数据文件的操作。一般而言最最方便的数据读写形式就是文本文件，当然很多的时候我们使用的excel的格式，这个时候建议大家把excel文件存成cvs的格式，这样也可以方便进行操作。当然如果你下载了读取excel文件的专门包的话，也是可以操作的。</p>

<p>主要的读写操作命令是下面两个：read.table() 适合 读写ASCII 文件，read.csv()适合读写Excel/CSV文件。要注意的是read.table()并不适合读写太多太大的矩阵结构，这个时候可以用scan()命令代替。</p>

<p>比如我有一个已经存储好的txt数据文件，名字叫做lorenz.txt，下面就有这个文件做一个数据读写的展示。</p>

<p>则命令是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x&lt;-read.table("lorenz.txt",header=FALSE)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意：</p>

<p>这里我省略了设置你的工作目录的工作，这是因为，我把这个文件放在我的 <code>home</code> 文件夹下，如果不是的话，运行下列命令：<code>getwd()</code>得到你的工作目录，一般在 Linux 中这个是默认设置在 <code>home</code> 文件夹下的，当然如果你在 Windows 下可以用如下命令：<code>setwd("C:/Users/XXXX")</code> 里面填上你喜欢的路径即可。</p>

<p>这个文件是关于洛沦兹方程的，所以我加了一个 <code>plot()</code> 命令展示它的结果：</p>

<p><img src="http://iphyer.github.com/images/R/Lorenz.jpg" alt="Lorenz" /></p>

<p>当然如果是excel的格式使用下面的命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">y&lt;-read.csv('lorenz.csv', header=TRUE)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当然，另外一个命令的方向就是从R向文件中写数据可以使用如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">write.table(x,'lorenz.txt',col.names=FALSE, sep='\t')</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="r-3">3.4一个使用R的例子</h3>

<p>下面结合一个实际实验中例子给大家展示一下用R可以做的物理实验数据处理。曾近在一次实验中我们需要拟合一条直线，这是在单摆的振动中，我们测量它的不同振幅从而希望可以得到单摆的衰减系数。这个实验设计中包含如何从视频文件中读出数据，然后进行数据处理，这里面包含像素坐标和实际坐标的转换，我们假设全部得到这些数据了。我下一步需要关注数据的拟合操作。</p>

<p>首先我们输入数据文件，命令如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">c1&lt;-data.frame(X=c(197,224,251,278,306,335,364,396,424,453),Y=c(424,381,358,338,327,315,309,300,296,291)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里使用数据框从而保证下一步不需要担心数据输入的时候有缺失或者不全。</p>

<p>下面让我们简单估计一下数据的分布与图像，从而得到下一步的行动方法。加上一个 <code>plot()</code> 命令即可, <code>plot(c1)</code>。</p>

<p>图像如下：</p>

<p><img src="http://iphyer.github.com/images/R/plot1.jpg" alt="RawData Plot" /></p>

<p>下面的任务就是对于这个图像的拟合。</p>

<p>从原理上分析我们已经知道了这个图像的衰减规律符合如下的函数形式：Y=a+b<em>exp(-c</em>X)，所以所有的工作就是求解这个拟合的系数。我们使用如下的命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nls.sol&lt;-nls(Y~a+b*exp(-c*X),data=c1,start=list(b=215.8,a=40.18,c=0.01478))
</span><span class="line">
</span><span class="line">nls.sum&lt;-summary(nls.sol);nls.sum</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>R给出如下的输出结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Formula: Y ~ a + b * exp(-c * X)
</span><span class="line">
</span><span class="line">Parameters:
</span><span class="line">
</span><span class="line">Estimate Std. Error t value Pr(&gt;|t|)
</span><span class="line">
</span><span class="line">b 1.347e+03 1.829e+02 7.366 0.000154 ***
</span><span class="line">
</span><span class="line">a 2.870e+02 2.734e+00 104.965 1.88e-12 ***
</span><span class="line">
</span><span class="line">c 1.170e-02 7.230e-04 16.182 8.37e-07 ***
</span><span class="line">
</span><span class="line">---
</span><span class="line">
</span><span class="line">Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
</span><span class="line">
</span><span class="line">Residual standard error: 2.62 on 7 degrees of freedom
</span><span class="line">
</span><span class="line">Number of iterations to convergence: 8
</span><span class="line">
</span><span class="line">Achieved convergence tolerance: 1.686e-06</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你还是没有办法从上面的残差分析中看出拟合的好坏的话，我们使用如下命令拟合所有的曲线，得到具体的拟合的图像结果。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">xfit&lt;-seq(180,480,len=2000)
</span><span class="line">
</span><span class="line">yfit&lt;-predict(nls.sol,data.frame(X=xfit))
</span><span class="line">
</span><span class="line">plot(c1$X,c1$Y);lines(xfit,yfit)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果如下：</p>

<p><img src="http://iphyer.github.com/images/R/plot2.jpg" alt="Final Plot" /></p>

<p>可以看到拟合的结果相当好，最后的结果是：Y=287.0+1347exp(-0.0117X) 。</p>

<h3 id="section-4">3.5进一步深入提高</h3>

<p>上面的内容充其量只能算是一个导引，大家如果愿意深入的学习R的操作有很多的材料可以学习。第一个就是An Introduction to R by Venables and Smith，这个也是R的官方简介，也是全世界学习R的入手手册。几乎可以说初级中级使用者所有的东西这本书都具备。当然，它的缺点就是例子太过简单，同时因为简单所以很多例子缺少实战效果。推荐薛毅的《统计建模与R软件 》这个是相当不错的书。前面复习了一下统计的基本知识后面几乎都是结合例子进行的讲解。当然如果你是为了快速查找某些命令可以看看《R语言使用笔记》 这是从薛毅的《统计建模与R软件 》中精简出来的命令集合。当然网上也有很多的材料，最著名的就是<a href="http://cos.name/cn/">人大统计之都 COS论坛</a> 确实是很有效果的。当然如果英文够好，推荐直接去<a href="http://cran.r-project.org/">CRAN</a>，CRAN是R的官方所有资料的归档的地方，全称是The Comprehensive R Archive Network，也是相当权威的地方。</p>

<h2 id="section-5">4.总结</h2>

<p>这篇文章主要是关于R，这个著名而有效的统计和数据处理系统。其实R最有效的地方是有很多专门化的软件包，相信所有做过是生物统计的人都不会忘记在Bioconductor这个软件包的陪伴下度过的日日夜夜。希望你也可以欣赏到R的伟大魅力</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[游记——南京博物馆梵高画展]]></title>
    <link href="http://iphyer.github.com/blog/2018/02/09/nanbo/"/>
    <updated>2018-02-09T21:09:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/02/09/nanbo</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>2018-02-09</p>

<p>好方的游记啊。。。</p>

<p>下面是原来游记的内容，那首联句不错，我把图都去掉了。</p>

<!--more-->

<p>2012-05-11 18:04:55</p>

<p>感谢同学一起去看画展，有时候看看别人的画展对于心里的未尝不是一种放松。同学在豆瓣上看来的活动，鉴于我没有豆瓣这么文艺的东东就写这篇游记作为纪念了。</p>

<h2 id="section-1">一、路程</h2>

<p>坐地铁二号线到上海路站下，然后沿着莫愁路一路向南就可以到朝天宫。也就是南京博物馆所在地。门票不贵，有学生证打折是10元钱。可看的东西不少。</p>

<p>朝天宫牌坊和文物官员至此下马。</p>

<p>然后一路走，转过宫墙。</p>

<p>朝天宫相传吴王夫差在这里设冶铸作坊制造兵器，因此而称作冶山，又叫冶城。历史上记载南京最早的名称就是“冶城”。 东晋初，这里是丞相王导的西园。</p>

<p>至今在朝天宫门口还可以看到纪念卞壶的遗迹。</p>

<p>从明朝开始，明太祖朱元璋在初洪武年间（1384年）重建后原来北宋的文庙并改名为朝天宫，在明代，朝天宫一直是朝廷举行盛典前练习礼仪的场所，以及官僚子弟袭封前学习朝见天子礼仪的地方。</p>

<p>买票，然后进入景区。</p>

<p>石碑旁有介绍，清代曾国藩任两江总督时重修这里并作为祭祀孔子的文庙。</p>

<h2 id="section-2">二、画展</h2>

<p>进入之后，直奔重点而去。也就是梵高的画展。</p>

<p>这次展出的是梵高1885年创作的《正在挖地的农妇》，这也是梵高原作首次来南京展出。</p>

<p>一起展出的还有30余件与梵高“同龄”的老物件，比如水壶、镰刀、锄头、土豆筐、围巾等。还有，一批围绕梵高画作开发的文化衍生产品。设计者提炼出梵高名作中的标志性元素，再用抽象形式进行表现，设计出沙发、挂毯、时装、高跟鞋等各种产品，这些创意设计届时也将成为 展厅内的一道时尚风景。</p>

<p>同时也展出了梵高同时期中国艺术的发展，比较了两国当时的文化发展和艺术上的突出对比。</p>

<p>还是值得一看的。</p>

<p>随后出来，可以看看南京城市展，钟山虎据，六朝金粉，纸醉金迷，明清繁华，民国风流。别与气度。</p>

<h2 id="section-3">感想</h2>

<p>梵高的画，给人的感觉是一种田园乡村的感觉，没有什么激动，没有什么波澜，没有天崩地裂，也没有海枯石烂。有的只是淡淡地劳动。锄地，耕田，简简单单的动作，含着家的感觉，离家的游子你远去何方，孤单的人，你又在何处安息。</p>

<p>有的时候，不要太累，不要太苦的追求着问题，说不定就是自己的问题。梵高的经历我不想细说，大家都过了写高考作文的年龄，此心安处是吾乡。就算“常羡人间琢玉郎”又如何，就算“天教分付点酥娘”又能怎样。 万里归来年愈少，微笑，笑时犹带岭梅香。We are strong, because we know what it’s like to be weak. We always keep our guard on , because we know what it’s like to cry ourselves to sleep.</p>

<p>我们是坚强的，因为我们了解脆弱会变成怎样；我们充满戒备， 因为我们尝过哭着睡着的滋味。</p>

<p>但是人生重要一步一步走下去。</p>

<p>后面的南京城市展也很不错。</p>

<p>赞，声光效果和文化气息。中国的城市，最最具有对比色彩的就是南京和北京，连名字都起得带有宿命搬的味道。</p>

<p>南京展集中展示了南京千年的历史与文脉。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">夫差筑城，江东父老，钟山胡据，石头龙蟠。
</span><span class="line">
</span><span class="line">直到千寻铁锁沉江底，一片降幡出石头。
</span><span class="line">
</span><span class="line">衣冠南渡，白云苍狗，多少世家几多大族，总被雨打风吹去，只剩下乌衣巷口夕阳斜，白云默默对晴川。
</span><span class="line">
</span><span class="line">门外韩擒虎，楼头张丽华。万户千门成野草，只缘一曲后庭花。
</span><span class="line">
</span><span class="line">吴宫花草埋幽径，晋代衣冠成古丘。 三山半落青天外，二水中分白鹭洲。
</span><span class="line">
</span><span class="line">度过了盛唐，走过了两宋，一首桃花扇又在唱着兴亡更替的咏叹调。
</span><span class="line">
</span><span class="line">秦淮无语话斜阳， 家家临水应红妆。 　
</span><span class="line">
</span><span class="line">春风不知玉颜改， 依旧欢歌绕画舫。 　
</span><span class="line">　
</span><span class="line">青楼名花恨偏长， 感时忧国欲断肠。 　　
</span><span class="line">
</span><span class="line">点点碧血洒白扇， 芳心一片徒悲壮。 　　
</span><span class="line">
</span><span class="line">江南佳丽地，金陵帝王州。
</span><span class="line">
</span><span class="line">谁来叹兴亡！ 　</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从南京跳跃开始就是一个新的时代的篇章，一如这展馆中的阶梯，一层一层。</p>

<p>都是战败的合约，走的一如近代史般艰难。</p>

<p>出来之后，看到满目的芳草别有滋味在心头。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">草合离宫转夕晖，孤云飘泊复何依？ 
</span><span class="line">无情最是台城柳，依旧烟笼十里堤。</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思考然后出发]]></title>
    <link href="http://iphyer.github.com/blog/2018/02/09/bookthinking/"/>
    <updated>2018-02-09T21:05:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/02/09/bookthinking</id>
    <content type="html"><![CDATA[<p>人总要有所相信，并为之努力，才能离开浮躁，离开庸俗，离开那些浅薄的感动。</p>

<p><!--more--></p>

<p>不喜欢看电影，当然电影也有很多经典，但是电影融入的导演意识太多，影片的时间也太短。往往忽略掉许多的细节。看书才会知道更多的细节，才会知道草蛇灰线，伏线千里之外是怎样的伟大。如果懂了福贵所经历的种种才会知道活着是多么的艰难，也会在生活的困顿中生出某些感悟而不是悲伤的哭泣，你也才会欣赏老牛夕阳暮耕图是生命怎样的不灭的呐喊；如果懂了孙少安和孙少平的不屈和奋斗，才会知道什么是奋斗，什么是世事沧桑，也才会更深刻地理解什么是人海茫茫，但是总有真情，你才有可能读懂路遥在后记中所写的“希望将自己的心灵与人世间无数的心灵沟通。”；如果看懂了白嘉轩的一生，你才有资格说什么是历史，什么是黄土高原汉子的脊梁，关中的土地孕育了我们人口最多的民族，直到今天在这里发生的故事还是直抵我们民族的肺腑；如果懂了傻子二少爷的死前的微笑，你才会知道历史的另外一种写法，以一个人的目光或者一个傻子的目光去看看这个红尘万丈的世界吧，如此美好而多娇，无奈而深沉；如果懂了芙蓉镇里胡玉音的人生悲歌，你才会知道那个疯狂的年代到底对人们有多大的伤害，你才不会在看到那个疯狂年代的记录时，发出事不关己的嘲讽和自以为高明的笑声，这是对人性的折磨。</p>

<p>总体而言历史告诉人们事实，但是没有感情。自司马迁以降，微言大义，不虚美， 不隐恶一直是历代 史家的追求，但是真的可以客观么？千年来，史书上写的是王侯将相，戏台上唱的演的也是王侯将相或者才子佳人。但是你在哪里，那些悲歌的灵魂何在，那些过往又何处解释？正如一句话说的好：“不喊痛，不一定没感觉。不要求，不一定没期待。不落泪，不一定没伤痕。不说话，不一定没心声 —— 沉默，不代表自己没话说。离开，不代表自己很潇洒。快乐，不代表自己没伤心。 幸福，不代表自己没痛过。”不代表什么，也不意味着什么。但是什么可能就是什么也可能什么也不是，表面的永远太简单，真实往往太复杂。如果看过《斐多》篇，你才会知道灵魂到底是什么，苏格拉底的临死前的抉择告诉你，什么是灵魂，怎么面对那个必然来临的时刻。上帝的公平在于会给每个人一个注定的结局，但是你怎么办？史铁生的思考震撼了很多国人。回顾中国历史，孔子更多的是做人的哲学，出世的智慧；西哲才有了关于个人灵魂的思考，灵魂是否不朽问题是关乎着我们何以自守，何以存世的问题。看看苏格拉底的抉择吧！</p>

<p>多读些深刻的书吧。 人总要有所相信，并为之努力，才能离开浮躁，离开庸俗，离开那些浅薄的感动。沉下心去，向着未来前进！ </p>

<p>一篇短文，一个观点，可以不同意或者反对，不过争论没有意义，更有所爱吧。这个偏好永远是难解的世界难题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于LATEX的思考——我们需要学到了什么]]></title>
    <link href="http://iphyer.github.com/blog/2018/02/09/latexthinking/"/>
    <updated>2018-02-09T20:49:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/02/09/latexthinking</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>偶然登陆了一次人人，发现真是惨不忍睹。谁都有那么一段逗逼一般的岁月，不过呢，还是需要积淀下。</p>

<p>同时整理下当时自己的一些作品，虽然当时 too young 也 sometimes naive， 但是思考还是值得拥有的。</p>

<!--more-->

<h2 id="section-1">1、前言</h2>

<p>想到写这个是因为这么一篇大家都在转发的日志 <a href="http://blog.renren.com/blog/237934623/892726074">LaTeX新人教程，30分钟从完全陌生到基本入门</a></p>

<p>说实话我非常喜欢写这些技术普及文的人，这样的工作需要付出的辛劳完全超乎想象。赞！在这个考完试的晚上，睡不着的时候看完了文章，我想总结总结自己的思考。最近也有学弟学妹问LATEX怎么用。</p>

<p>这里我受到的第二个启发是一本著名的书Linux and the Unix Philosophy相信每个看过的人都会为那些思想所折服。Small is beautiful.还有Make each program do one thing well.都非常经典。</p>

<p>这里我总结一下一些使用LATEX的思想，思想的作用就是让你从更高的角度看问题，不代表就能解决好具体的问题。“臣之所好者，道也，进乎技矣。”具体的问题当然还是需要经验的。但是好的思想可以让你少走弯路。希望你可以在看完第一个那个帖子的文章后，看看这篇文章，作为补充吧。</p>

<h2 id="section-2">2、形式与内容分离</h2>

<p>闲话少说，我们开始LATEX的思想探讨。在任何的LATEX书上，包括LATEX自己都承认的思想就只有一个“所思即所得”但是这个说法就像“道可道非常道”一样，太高端大气了，用不起。其实这个思想，最最主要的实现方式就是一个——形式与内容分离。</p>

<p>何为形式，何为内容呢？</p>

<p>以Linux and the Unix Philosophy这本书为例：这本书的内容就是Linux使用中的一些精髓思想，比如Make each program do one thing well.但是具体这本书是用什么字体，是不是要加粗，怎么排列的话，就是形式。</p>

<p>LATEX的第一要义就是形式与内容分离。</p>

<p>具体而言在你的写作中你只要指出，这段是section1，这个是 subsection1.1，这个是subsubsection1.1.1，这个是摘要，这个是参考文献等等。事实上，在LATEX中你只要知道自己需要的内容在文章中结构作用。</p>

<p>当然这个也是被广泛称赞的LATEX是结构化文档的典范，其实你可以看出来如果这样你的文章自动该是这样的结构：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">title
</span><span class="line">
</span><span class="line">abstract
</span><span class="line">
</span><span class="line">keyword
</span><span class="line">
</span><span class="line">section1
</span><span class="line">
</span><span class="line">subsection1.1
</span><span class="line">
</span><span class="line">subsubsection1.1.1
</span><span class="line">
</span><span class="line">........................................
</span><span class="line">
</span><span class="line">...........................................
</span><span class="line">
</span><span class="line">section X
</span><span class="line">
</span><span class="line">subsection X.1
</span><span class="line">
</span><span class="line">subsection X.1.1
</span><span class="line">
</span><span class="line">reference</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样的结构迫使你按照论文的结构进行思考，不然如何写下去？所以LATEX用来写论文是非常合适的。虽然还原论已经破产，但是分治的思想还是大家非常欣赏的。</p>

<p>那么问题来了？</p>

<p>具体的形式怎么控制呢？</p>

<p>答案就是LATEX大家经常说的模板。</p>

<p>所谓的模板就是规定好，比如我的section这个部分要用4号宋体，加粗，倾斜。</p>

<p>那么其实你的section1，section2都会使用这样的形式。</p>

<p>这样的结构就把人从机械地形式调节中解放出来了。LaTeX中的模板设置好了这些形式的具体表现形式。你只要关注你的文章第一部分写什么，第二部分写什么就可以了。</p>

<p>这也就是一般所谓的“所思即所得”。</p>

<p>这个时候你的重点是集中精力在内容上而不是形式上。</p>

<p>这里插一个题外话：</p>

<p>形式与内容分离是现在的普遍公式。比如XML就是这个思想的极致，只规定内容，甚至不指定具体的内容。比如iTunes的歌曲目录就是用xml存储的。那么Apple是怎么表现出这么漂亮的内容的？答案是CSS，XSL这些额外的形式表达手段。包括后面想说的markdown/Wiki等也是形式与内容分离的。这里说说MS有点软，03的word都是内容和形式结合的，但是docx这个格式是基于XML的，不知道有没有试过使用使用压缩软件直接解压docx文件的效果:</p>

<p><img src="http://iphyer.github.com/images/Latex/think/1.jpg" alt="tu1" /></p>

<p>然后解压的效果：</p>

<p><img src="http://iphyer.github.com/images/Latex/think/2.jpg" alt="tu2" /></p>

<p>打开word那个文件，里面有一个document.xml的文件，打开的效果如下：</p>

<p><img src="http://iphyer.github.com/images/Latex/think/3.jpg" alt="tu3" /></p>

<p>这个文档就是标准的xml文件。所以如果没有装07的时候可以使用压缩软件救急。</p>

<p>这个是题外话了。</p>

<h2 id="section-3">3、模板的力量</h2>

<p>相信如果你理解了LATEX的形式与内容分离的原则，那么你就可以知道LATEX最最有技术含量的部分了——设计模板。什么样的模板直接决定了你出来的效果。</p>

<p>但是这个部分事实上是最最简单的了——因为大家用的模板基本都是对方提供的。比如说Science，PRL这些机构都有提供专门的结构。</p>

<p>而很多的比赛也有很多的人共享自己的模板。比如Ctex自己的网站有很多的内容，从数学建模到比如某个专业杂志基本都有人提供了这样的模板。所以你可以直接拿来使用。</p>

<p>当然到了你可以自己写模板的时候，希望你也可以分享出来啊。</p>

<h2 id="google">4、Google是最好的老师</h2>

<p>这个内容，事实上强调了你要学会google。这里其实你该确定一个观点除非你在做十分前沿的工作，比如CERN写自己的报告，大部分你在生活中遇见的问题都有人已经遇见过了。Google之。这里推荐Google，因为baidu因为某些原因却是不如Google准确，同时必要的时候使用英文去搜索惊喜会更多。这个时候往往会在Ctex或者Stackflow上看到很多例子。</p>

<p>这里其实就是LATEX所属于的GNU等为代表的开源软件的基本特征——折腾！生命不息，折腾不止！每一个开源软件的用户都是有自己的探索欲望的。所以折腾是一种乐趣，当然这个的坏处是——比较耗时间。</p>

<p>当然如果Google不出来的时候，可以去；论坛发言求助，一般很快会有人来解答的。关于LATEX一般中文用户都是去Ctex的论坛发言。</p>

<p>最后的方法如果实在不行，可以重造轮子，自己修改LATEX代码或者重新定义命令吧。</p>

<h2 id="section-4">5、美也是生产力</h2>

<p>这个是看BBC纪念乔布斯的纪录片得来的一个观点——什么电脑最有价值？——能够吸引用户愿意使用的才是最有价值的。</p>

<p>所以经常有人说，我用word打出公式也很漂亮啊。其实这里关于公式的美观有各种判断标准，但是只能说LATEX代表的数学、物理、计算机等为代表的科技界的主流审美标准。AMSMATH这个包就是美国数学学会为LATEX写的。</p>

<p>美的东西大家都愿意用，愿意看，所以美也是生产力。</p>

<p>当然这点仁者见仁智者见智，mark。</p>

<h2 id="section-5">6、内容大于形式</h2>

<p>这是在科研中大家经常听到的观点——做好的科研，做好的成果。这点其实就是在强调内容，而不是形式。</p>

<p>其实用什么工具无所谓。我是Linux用户，但是偶尔我也切换到windows下，我相信这个世界该是多姿多彩的，所以用工具是无所谓的，只要合适！</p>

<p>重要的是人，人的成果。</p>

<p>LATEX分离形式和内容的一个重要目的就是把人从形式中解放出来，集中精力在内容上！！！</p>

<blockquote>
  <p>好的论文内容比用好的工具写的论文重要的多的多，不要本末倒置了。</p>
</blockquote>

<p>当然这个貌似和上一条矛盾了。但是这个就是一个问题的两个方面，首先保证的是内容，内容有了的基础上，我更喜欢的工具写论文，不是也很好么？</p>

<p>这里郑重写一段：</p>

<blockquote>
  <p>为word正名！</p>
</blockquote>

<p>其实word也是很强大的，大部分情况下，我们把word当成了文本编辑器使用，我们的计算机基础，至今都在强调怎么做文字环绕。。。OMG。</p>

<p>word在长文档中的使用是有非常巧妙地技巧的。比如版式就是word的核心概念。word的开发工程师说过，不理解版式你就没有真正理解word。</p>

<p>推荐大家看看《word排版的艺术》。如果你希望使用word的话，增加一点效率吧。</p>

<p>其次MS office有一个非常强大的功能叫VBA，曾有同学双眼通红地告诉我他花了一个半天调节好了全系同学个人文档。其实每次的操作都是相同的，调节字体大小，换行距等等，其实这样的重复工作VBA是最最胜任的。</p>

<p>80%的人使用了word大约20%的功能，剩下的那80%其实是非常有利于我们提高效率的。</p>

<h2 id="section-6">7、后记</h2>

<p>这里写的都是一家之言，如有疏漏，请多多指教。不胜感激！</p>

<p>最后做一下一个宣传：</p>

<p>其实日常的一些小工作，比如列列试验计划什么的，大家使用LATEX，WORD都是比较笨重的。</p>

<p>记事本最找，TXT的格式可以通杀，但是不很美观，也不结构化。</p>

<p>最好的工具是MARKDOWN。</p>

<p>如果有兴趣，可以看看下面的文章：</p>

<p>Markdown写作浅谈：
http://www.yangzhiping.com/tech/r-markdown-knitr.html</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intermittent fasting 减肥]]></title>
    <link href="http://iphyer.github.com/blog/2018/01/31/fast/"/>
    <updated>2018-01-31T21:11:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/01/31/fast</id>
    <content type="html"><![CDATA[<p>今天在听 NBC Nightly News 的时候，发现了一个很好的减肥方法， Intermittent fasting。我突然觉得可以试试这个方法，然后做了些搜索。其实这个方法是很多方法的总结。</p>

<!--more-->

<p>这个背后的原理就是控制热量的摄入，同时利用睡眠时间来加速消耗自身的脂肪。换句话说就是在你睡觉的时候帮助你减肥。</p>

<p>You are not only what you eat but also when you eat.</p>

<p><a href="https://www.today.com/health/intermittent-fasting-restrictive-eating-right-you-t102998">Intermittent fasting: Is restrictive eating right for you?</a></p>

<p><a href="https://www.nbcnews.com/health/health-news/time-restricted-eating-can-help-weight-loss-researchers-say-n838486">Time-restricted eating can help with weight loss, researchers say</a></p>

<p><a href="https://www.wsj.com/articles/can-different-forms-of-fasting-make-you-healthier-1491962461">Can Different Forms of Fasting Make You Healthier?</a></p>

<p><a href="http://www.wsj.com/video/intermittent-fasting-better-for-the-waistline-and-brain/2259DA4E-0F3B-411A-A02E-71900373F012.html">Intermittent Fasting: Better for the Waistline and Brain</a></p>

<p><a href="https://www.wsj.com/articles/how-to-get-the-benefits-of-fasting-with-less-deprivation-1487368174">How to Get the Benefits of Fasting With Less Deprivation</a></p>

<p>其实具体方法也很简单，我觉得就是晚饭，少吃点，只吃部分水果其他就是多喝水或者黑咖啡，控制热量摄入少于 600 卡。</p>

<p>其实就是在晚上运动之后，少量吃点东西就行。</p>

<p>比如: 两个鸡蛋 (78 calories x 2 ) + 部分水果 (香蕉 105 calories)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018年计划]]></title>
    <link href="http://iphyer.github.com/blog/2018/01/31/2018/"/>
    <updated>2018-01-31T21:09:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/01/31/2018</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>其实这个计划应该很久之前就已经开始做了，但是一直没有确定转入 CS 是不是成功了。所以现在才开始发布，时间飞快都已经到 2018 年 2 月份了。</p>

<p>说起来有没有转入 CS 确实是影响很大。如果能够转入 CS 就不需要担心，如果没有办法转入 CS 说起来不得不继续依靠现在的专业。现在的专业说实话，有点青黄不接，基本找不到很好的老师。</p>

<!--more-->

<h1 id="section-1">何去何从？</h1>

<p>其实我已经问了自己这个问题很久了，到底读还是不读 PhD？ 就个人想法而言，还是希望自己可以读完 PhD 毕竟已经花了这么久的时间，如果能够继续花时间好好读一读，肯定对于自己的出路是很好的提高。但是如果读完 PhD 总结自己的前途，可能真的只有学术这么一条出路了。实在是感觉到内心很纠结。如果是当年那个一无所知小朋友，肯定我就选择 PhD 了，但是两年已经快过去了，内心的冲动现在基本都已经平息了，见多了渣导师，花式坑学生的例子之后已经对于学术的激情不在，可以说现在我觉得学术圈也就是一份工作罢了，说不上好也说不上坏，工作而已。</p>

<h1 id="section-2">具体计划列表</h1>

<p>这个只是初步的计划，无论如何还是需要有一个具体的规划来确保自己的学习计划可以顺利展开。先定一个小目标！</p>

<h2 id="section-3">减肥</h2>

<p>真是是要控制体重了，除了锻炼还有就是适度控制饮食，两者结合，努力把体重控制到 70kg。这个是根据中国标准算出来的具体数值，其实换算到磅数是 154.324 lb,凑个整数就是 50 lb。好吧仙子啊差距有点大。但是确实是需要重视起来了，毕竟身体是自己的。</p>

<h2 id="leetcode">Leetcode</h2>

<p>虽然还是喜欢科研，但是还是觉得不能只是单单做那种死板的科研，还是需要和学术圈结合的科研，如果将来有机会去谷歌，Facebook， Microsoft这样的大公司实习也是很重要的。</p>

<p>目前的计划就是，每天在完成作业的基础上，刷 3 道题。争取这学期把，前面 400 道题目完全刷过去。同时在自己的 Github 上做好记录毕竟还是需要这些题目帮助自己更好的掌握实习，提高编程技巧。</p>

<h2 id="turbine-">Turbine 的论文</h2>

<p>说起来比较郁闷呢，估计去年投的一篇论文沉没了。现在还是要把这篇硕士期间的工作重新捡起来争取发表出来，还是需要更好的科研成果。</p>

<blockquote>
  <p>没有科研成果，说的再好也无济于事。 Talk is cheap, show me your achivements.</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UW-Madison TA Speaking Test 总结]]></title>
    <link href="http://iphyer.github.com/blog/2018/01/15/speakingtest/"/>
    <updated>2018-01-15T22:12:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/01/15/speakingtest</id>
    <content type="html"><![CDATA[<h2 id="section">起因</h2>

<p>说起来每个学期都需要过一个口语考试，这个考试如果口语过了 26 的托福可以 waive 掉不然，就必须参加。正好要参加这个考试，这里总结下自己的备考经验。</p>

<!--more-->

<h2 id="sample-test">Sample Test</h2>

<p>考试形式和内容和网上提供的 Sample Test 几乎一模一样，所以必须认真看 Sample Test 做好准备，毕竟打有准备之仗是成功的必要因素。</p>

<p>这里是 Sample Test 的下载链接，</p>

<blockquote>
  <p>What’s the test like?</p>
</blockquote>

<blockquote>
  <p>Download this <a href="https://esl.wiscweb.wisc.edu/wp-content/uploads/sites/180/2017/05/Sample.SPEAK_.Test_.pdf">sample SPEAK test</a> to practice. On the day of the test, you will not need a pencil, paper, or any other materials. You will sit at a computer terminal and wear headphones with a microphone. You will listen to the test questions as you follow along reading a test booklet. You will speak into the microphone and your voice will be recorded. You will not have to write anything. You will not be able to make any notes during the test. The test will take about 20 minutes.</p>
</blockquote>

<p>当然学校网页经常变动，所以到时候搜索 ESL 然后查看网页即可。</p>

<h2 id="section-1">必需注意的事项</h2>

<p>其实也没有多少，口语还是在于练习和使用，我只强调两个最重要的：</p>

<h3 id="section-2">(1)用简单词汇，简单语法，简单时态。</h3>

<p>这是口语考试，不是作文，不需要你辞藻华丽，简单的东西往往不会错，同时方便理解。</p>

<h3 id="section-3">(2)语速放慢，吐词放清</h3>

<p>这是最重要的，因为你用的都是简单句，所以只要你放慢，放清，基本别人都能理解你的意思。这是最有帮助的。</p>

<h1 id="section-4">考试技巧</h1>
<p>前面都是主要的考试注意事项，后面这个部分是考试的具体来源和方法。当然就和我在这部分说的，都是奇技淫巧，说起来并不是最好的方法。还是好好练习口语是最好的。</p>

<h2 id="section-5">口语考试试题来源</h2>

<p>其实每次考试的时候我都很奇怪，这个考试是怎么出的题目。</p>

<p>这个考试看起来就特别有 ETS 的风格，前面的知道，两个人评分然后取平均都是 ETS 的风格。同时这个考试的试题特别像我初中的口语考试。当然了初中的考试非常简单，但是这个也差不多。</p>

<p>说起来这个考试的试题来源还真是 ETS, 是 ETS 在多年之前开发的一个项目，<a href="https://en.wikipedia.org/wiki/SPEAK_(test)">Speaking Proficiency English Assessment Kit</a>。</p>

<blockquote>
  <p>The Speaking Proficiency English Assessment Kit (SPEAK) is an oral test developed by the Educational Testing Service (ETS). The SPEAK test continues to be administered to non-native English speakers, though it is no longer supported by ETS. No new versions of this test exist. The test aims to evaluate the examinee’s proficiency in spoken English; however, most academic institutions recognize that it is limited in that capacity, and have therefore abandoned using it. It is usually taken as a professional certification, <strong><em>especially for graduate teaching assistants in the American college and university system</em></strong>, who are often required to hold office hours and converse in English with students. </p>
</blockquote>

<p>维基百科还真是挺准确的。</p>

<p>因为 ETS 不再支持了，所以现在在 ETS 的官网上也只能找到一个关于这个考试的<a href="https://www.ets.org/research/policy_research_reports/publications/report/1995/hxqb">报告</a>。但是具体的备考建议和如何准备则只字不提。说实话 ETS 的报告又臭又长，还都是那种文科统计分析 Style，大概重要的部分就是这个关于如何打分的报告表了。</p>

<p>不过事实上各个学校也就是用用这个考试 Format,他们打分还是主要关注你的口语是不是能够让美国同学不太费力的听懂。这个更多的是一种总体评价而不是细分项目。</p>

<p><img src="http://iphyer.github.com/images/speaking/pin.png" alt="pingjia" /></p>

<p>不过不少学校的 ESL 项目倒是给出了不少准备的方法，就是没有给出答案。所以让人非常不爽这个最后的结果。现在我就在想是不是准备一个答案来看下是不是可以。</p>

<h2 id="section-6">备考建议</h2>

<p>用上面的关键词谷歌下，你就可以找到很多的链接，不过大部分都是一样的内容，主要是是 TA 口语考试流程。大概只有少部分学校给了链接帮助你复习这个考试。所以这儿推荐我比较欣赏的两个比较好的视频。</p>

<p>来自 Iowa 大学的视频</p>

<p><a href="https://www.youtube.com/watch?v=d5iRZapAbsE&amp;feature=youtu.be">ESPA Test Procedures and Guidelines</a></p>

<p>帮助更大的一个视频，来自 Ohio University，虽然有 23 分钟长 ，但是我觉得更好，基本上是一道题目，一道题目的帮助你，</p>

<p><a href="https://youtu.be/DndM7Yfo-wQ">ELIP - SPEAK Test Information Video</a></p>

<p>这个老师的语速和用词也特别好，基本上我觉得如果你能说成这样，这个语速就非常完美了。事实上，我推荐的准备方法就是，按照这个音频的录音稿，自己读一遍，然后用手机录音，自己再听一边。什么时候如果你的口语可以在不刻意控制的情况下和这个视频的长度还有语调差不多了，估计你的口语也过关了。</p>

<p>Ohio 居然有贴心地准备了一个网页给出了很多细心的建议，详细的可以看这里<a href="https://www.ohio.edu/cas/linguistics/elip/graduate/oral-proficiency/speak-prep.cfm">Preparing for the SPEAK Test</a></p>

<p>第二项备考资料</p>

<p><a href="http://iphyer.github.com/upload/files/Speaking.pdf">Toward Speaking Excellence: The Michigan Guide to Maximizing Your Performance on the TSE® Test and SPEAK® Test</a></p>

<p>这本书是我在搜索的时候发现，这里有一篇<a href="http://www.cc.kyoto-su.ac.jp/information/tesl-ej/ej14/r2.html">书评</a>。这本书真的是特别特别贴合这个考试，</p>

<blockquote>
  <p>The book reviewed here promises to maximize the performance of non-native English speakers on another test produced by ETS, the Test of Spoken English (TSE), or its institutional version, the Speaking Proficiency English Assessment Kit (SPEAK).</p>
</blockquote>

<p>特别是这本书还给出了参考答案，实在是喜出望外。如果需要请认真复习。</p>

<h1 id="section-7">口语试题解析</h1>

<p>To be continued </p>

<p>说实话估计有时间还需要重新考下口语考试，这学期顺带看下书，做好备考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[USA印象6:得克萨斯州——奥斯汀 and 休斯顿游记]]></title>
    <link href="http://iphyer.github.com/blog/2018/01/02/austin/"/>
    <updated>2018-01-02T23:55:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2018/01/02/austin</id>
    <content type="html"><![CDATA[<h1 id="section">前言</h1>

<p>老同学在亚马逊工作一年后终于买房了，说起来还是码农赚钱。现在在北美的老兄弟，除了那几个家底殷实的同学，完全凭借自己一己之力在北美买房的这是第一个。还是很为同学高兴的。所以在这个麦迪逊史上第二冷的冬天就来了奥斯汀，得克萨斯州。</p>

<!--more-->

<h1 id="section-1">奥斯汀</h1>
<p>首先说下，城市名称的起源吧。德州的几大城市的名称都是来自历史上的著名人物，比如 奥斯汀就是德州独立和并入美国的关键人物,<a href="https://en.wikipedia.org/wiki/Stephen_F._Austin">Stephen F. Austin</a>。</p>

<blockquote>
  <p>Shortly afterward, the name was changed to Austin in honor of Stephen F. Austin, the “Father of Texas” and the republic’s first secretary of state. </p>
</blockquote>

<blockquote>
  <p>Stephen Fuller Austin (November 3, 1793 – December 27, 1836) was an American empresario. Known as the “Father of Texas”, and the founder of Texas, he led the second, and ultimately, the successful colonization of the region by bringing 300 families from the United States to the region in 1825.</p>
</blockquote>

<p>后面要介绍的这次旅游的另一个城市，休斯顿也是德州的历史名人。休斯顿打赢了德州独立的关键战役，圣哈辛托战役（Battle of San Jacinto）。是役，Sam Houston 代理德州民兵突袭了当时的墨西哥总统桑塔·安纳(Santa Anna)，可以说是以弱胜强，斩首行动的典型战役。</p>

<blockquote>
  <p>Sam Houston (March 2, 1793 – July 26, 1863) was an American soldier and politician. His victory at the Battle of San Jacinto secured the independence of Texas from Mexico in one of the shortest decisive battles in modern history.</p>
</blockquote>

<h2 id="section-2">城市简介</h2>

<p>说起任何城市都不能不提到这个城市的地理和功能。</p>

<p>首先是德州在美国的位置，德州在美国和墨西哥交界处。</p>

<p><img src="http://iphyer.github.com/images/Texas/map1.jpeg" alt="state capital2" /></p>

<p>还紧邻墨西哥湾，所以有很多天然的良港，比如休斯顿。这就是美国南部的著名港口。</p>

<p>当年南北战争的时候，得克萨斯州就是南方重要的棉花出口和物资进口基地。</p>

<p>德州内部，有三个大的城市群，达拉斯（其实是拉斯与沃斯堡、阿灵顿组成达拉斯-沃斯堡-阿灵顿城市群），圣安东尼奥 和 休斯顿。具体的位置如下。其中这次主要停留的奥斯汀就在三个城市群中间。</p>

<p><img src="http://iphyer.github.com/images/Texas/map.png" alt="state capital2" /></p>

<p>奥斯汀正好是得克萨斯州比较特别的地方，因为它是德州的首府，同时也是德州的经济发展最好的地方。美国很多州的首府往往只承担政治职能，最多再加上本州的教育中心，比如威斯康星的麦迪逊。但是奥斯汀比较特别，它也是著名硅丘(<a href="https://en.wikipedia.org/wiki/Silicon_Hills">Silicon Hills</a>)所在地。这里不仅仅是戴尔电脑的总部，也是一系列公司的总部或者分部所在地，包括 Apple, ARM, Cisco, eBay, Facebook, Google, IBM, Intel,  TI, Oracle, VMWare 和同学所在的亚马逊。说起来，奥斯汀也是亚马逊第二总部的 20 个候选城市。</p>

<p>这么多大公司，再加上德州大学奥斯汀分校，这所德州大学系统的旗舰校，让奥斯汀的气质非常特别。既有典型的德州风格（德州风格说白了就是西部风格，想想牛仔的风格就是德州的风格），也有特别文艺的一面。比如在全德州共和党大胜的情况下，奥斯汀是支持民主党的。。。</p>

<p>比如这里有一幅图，<a href="https://www.nytimes.com/elections/results/texas">Texas Results</a>。</p>

<p><img src="http://iphyer.github.com/images/Texas/2016GE.png" alt="Texs票数" /></p>

<p>这张图其实就是德州最真实的写照，首先，大部分德州是支持川普的，都是传统的大农场区域。但是大部分城市都是支持希拉里，主要是移民和教育成都问题。同时南方完全都是红色的，其实很多都是偷渡后来等到大赦或者链式移民进入美国的。同时比较有意思的是人数，即使是德州这样共和党的铁杆票仓，其实民主党势力也很强大。人数上并不是差别很大。当然这里又要牵涉到美国大选的所谓选举人团制度了，美国大选并不是一人一票，而是选举人团票数决定胜负，大部分州都是赢者通吃，所以有时候会出现胜选的总统不是多数人选择的情况，比如 2016 大选，希拉里的得到的支持者更多但是川普赢了选举人票。</p>

<p>当然现在还是书归正传。讲讲奥斯汀的游记。</p>

<p>奥斯汀以“世界现场音乐之都”（Live Music Capital of the World）闻名。最著名为第六街（Sixth Street），街上各类酒吧和其他夜生活场所，入夜后大多有各类乐团现场驻唱。说实话这次有机会去的，不过我们都对这种老美的酒吧文化没有兴趣，所有都没有去。</p>

<p>奥斯汀的核心城区，和所有的州府所在地一样，以州议会大楼为中心，然后环形放射。州议会大楼以北便是得州大学校园。此大学学生五万余人、教职员两万左右，在奥斯汀人口比例中，占有相当的分量。奥斯汀总人口大概也就是 90 万人（全美第 11 大城市）。</p>

<p>当然，奥斯汀这个城市总体的感觉第一个就是文艺范。特别的文艺，特别的有感觉。放几张街景图。</p>

<p><img src="http://iphyer.github.com/images/Texas/1.jpeg" alt="street1" /></p>

<p><img src="http://iphyer.github.com/images/Texas/aus4.jpeg" alt="street2" /></p>

<p><img src="http://iphyer.github.com/images/Texas/aus5.jpeg" alt="street3" /></p>

<p><img src="http://iphyer.github.com/images/Texas/aus7.jpeg" alt="street5" /></p>

<p><img src="http://iphyer.github.com/images/Texas/aus11.jpeg" alt="street6" /></p>

<p>UT-Austin 的主校园，话说当年 UT-Austion 默默拒绝了我，真是残念。</p>

<p><img src="http://iphyer.github.com/images/Texas/2.jpeg" alt="street7" /></p>

<p>当然还去了，奥斯汀郊区的一个天然湖，风景确实是漂亮。据说湖这边是饭店，可以参观，对面全部是私人别墅。</p>

<p><img src="http://iphyer.github.com/images/Texas/aus1.jpeg" alt="street8" /></p>

<p><img src="http://iphyer.github.com/images/Texas/aus2.jpeg" alt="street9" /></p>

<p><img src="http://iphyer.github.com/images/Texas/aus3.jpeg" alt="street10" /></p>

<p>另一个让人感受深刻的，就是奥斯汀的环保。</p>

<p>这个城市是不允许使用塑料袋的。注意是不允许，不是花钱买塑料袋。就是明令禁止。所有的超市都是布袋或者纸箱。没有任何塑料袋。即使德州本身是石油和石油制品的生产大洲。</p>

<h2 id="state-capital">State Capital</h2>

<p>当然和麦迪逊相似，作为州府，这个城市的核心建筑无庸置疑，必须是州府。所以我们也去参观了州府。说实话，其实州府没啥好参观的，美国各州的州府都和国会山不是一个风格，当然具体大小、高度有区别，不过外面看都差不多。</p>

<p>当然，参观州府的精华不在建筑，在于里面的讲解，往往会解说各个州的历史沿革，著名人物和这座州府的特点。比如威斯康星的州府就会强调，州府用到了这个世界上所有的大理石，里面的两块大理石甚至是从地中海挖出来的。</p>

<p>放几张州府的照片，</p>

<p><img src="http://iphyer.github.com/images/Texas/cap1.jpeg" alt="state capital1" /></p>

<p><img src="http://iphyer.github.com/images/Texas/cap2.jpeg" alt="state capital2" /></p>

<p><img src="http://iphyer.github.com/images/Texas/cap4.jpeg" alt="state capital3" /></p>

<h2 id="bullock-texas-state-history-museum">Bullock Texas State History Museum</h2>

<p>这个博物馆就是德州历史的介绍，非常值得一去。在这里详细介绍了德州的历史沿革。</p>

<p>门口的孤星是德州的标志，德州也被称为孤星州，因为这是当年德克萨斯共和国的标志。</p>

<p><img src="http://iphyer.github.com/images/Texas/museum1.jpeg" alt="state capital2" /></p>

<p>在美国 50 个州，德克萨斯州的特殊在于，它是作为一个国家加入，这点在该博物馆有非常详细的介绍。</p>

<p><img src="http://iphyer.github.com/images/Texas/mu0.jpeg" alt="state capital2" /></p>

<p>事实上，当时围绕德州的归属，有三方力量角力，墨西哥，德州本土势力，美国国内势力。每一方其实又有不同意见，比如德州本土势力，其实就分成三派，亲墨西哥势力，亲美国势力，德州独立势力。所以说这段历史，其实仔细看是波诡云谲，让人一言难尽。</p>

<p><img src="http://iphyer.github.com/images/Texas/mu2.jpeg" alt="state capital2" /></p>

<p><img src="http://iphyer.github.com/images/Texas/mu3.jpeg" alt="state capital2" /></p>

<p><img src="http://iphyer.github.com/images/Texas/mu4.jpeg" alt="state capital2" /></p>

<p>当然这个时候，就看风流人物了。很多时候，一个伟大的人物在关键的历史节点的伟大闪光，可以彻底地改变历史的进程。想知道更多例子，只要看茨威格的名著《人类群星闪耀时》就可以了，这本书更贴切的名字其实是人类群星开挂时。在得克萨斯州的前途灰暗不明的时候，休斯顿，奥斯汀，达拉斯这些伟大的德州人坚定地选择了独立，选择了美国。甚至在美国本土不愿意接纳德州的情况下，选择独立也要和墨西哥割裂开来，甚至不惜独立建国，独立打赢德墨战争。比如阿拉莫之战，英雄的德州儿女冒着墨西哥敌人的罪恶弹雨枪林，坚持战斗，绝不放弃，直至弹尽粮绝也没有投降。</p>

<p>摘抄一段维基百科的介绍</p>

<blockquote>
  <p>阿拉莫城中当时的指挥是27岁的威廉·塔拉维斯中校、40岁的冒险家詹姆斯·鲍文和50岁的战争英雄及政治家大卫·克拉克，经过13天伤亡惨重的阿拉莫战役，墨西哥军队终于占领了阿拉莫，所有男性抵抗者均被处死，妇女和儿童得到赦免。</p>
</blockquote>

<blockquote>
  <p>三周后，以“记住阿拉莫”（Remember the Alamo!)为战斗口号的德克萨斯军队在山姆·休斯敦的指挥下在圣哈辛托战役取得了决定性的胜利，桑塔·安那也被俘。德克萨斯也因此在之后的几年中保持了独立并在1845年加入美利坚合众国。直到今天，阿拉莫之战依然被视作美国陆军历史上的神话，被美国人认为是自由意志下勇气和牺牲精神的象征，而阿拉莫博物馆每年有多达250万名的参观者。</p>
</blockquote>

<p>“Remember the Alamo!”被认为是美国人的精神战斗，就像中国军队强调，平型关战斗，飞夺泸定桥一样都被两国人民作为自己的精神象征。</p>

<p>当然不得不说的是，作为一个外国人，这是美国人官方史书的说法。在这个激动人心的爱国主义历史教育背景下，美国人从不主动提起的是，对于德州独立的原因。因为事实上是，从现在的历史观点看，墨西哥采取了更加文明的废奴主义，而德州是落后的蓄奴主义。所以德州不得不从墨西哥独立，不然就必须废奴，这是广大德州农场主所不允许的。</p>

<p>当然，不得不承认，美国人提”Remember the Alamo!”也是有原因的，因为正是墨西哥独裁者安东尼奥·洛佩斯·德·桑塔·安纳在阿拉莫的烧杀抢掠激怒了德州人，这也是休斯顿三周后可以集中力量打赢圣哈辛托战役的原因，也就不奇怪为什么美国人歌颂阿拉莫了。因为这在他们看来是和当年的独立战争一样的逻辑，当然你要是用南北内战的逻辑看是看不通的。</p>

<p>不过，作为历史教育来说，引述下别人的成熟观点 <a href="https://movie.douban.com/review/4955430/">美国精神的象征：阿拉莫之战</a></p>

<blockquote>
  <p>另外，当时统治墨西哥的是位残酷的独裁者，在美国人看来对暴政的反抗是正义的行为，他们是在为自由而战，与当年的美国独立战争反抗英国殖民者没有什么本质的区别。因此，阿拉莫之战对他们来说是不仅是保护自己的利益不受侵犯，也是对勤劳苦干、获取自由、不惧艰险精神的一种肯定。只要他们有能力，他们就不会止步于任何所谓的边界，也自然会为了保护自己应得的利益而不惜代价。这种热爱自由、敢于冒险、勇于进取、为自己的利益而奋斗的精神是美国国民性的重要组成部分，而阿拉莫之战就是这种价值观的典型代表。因此，它一再地被美国人民浓墨重彩地讴歌也就不足为奇了。</p>
</blockquote>

<p>当然博物馆也还原了，当年从墨西哥湾打捞出来的最早的北美殖民者从欧洲移民美国的船只，这是模型：</p>

<p><img src="http://iphyer.github.com/images/Texas/mu6.jpeg" alt="state capital2" /></p>

<p>当然也有德州的骄傲，航天工业，毕竟 休斯顿 是人类在月球说的第一个单词！</p>

<p><img src="http://iphyer.github.com/images/Texas/mu5.jpeg" alt="state capital2" /></p>

<h2 id="duck-boat-adventure">Duck Boat Adventure</h2>

<p>这个鸭子船也挺好玩的，就是水陆两用汽车，在奥斯汀市区绕来绕去。其实，现在觉得到了一个陌生的城市，如果有类似这样的观光巴士就选择做，往往观光巴士的路线都是本地人总结出来的，精雕细琢的路线，也往往会把重要的景点都一一覆盖。先坐着巴士走马观花一番，再自己决定挑哪些景点细细观察是更好的选择。</p>

<p><img src="http://iphyer.github.com/images/Texas/aus12.jpeg" alt="state capital2" /></p>

<p>当然，奥斯汀的湖景也很美</p>

<p><img src="http://iphyer.github.com/images/Texas/river1.jpeg" alt="state capital2" /></p>

<p><img src="http://iphyer.github.com/images/Texas/river2.jpeg" alt="state capital2" /></p>

<h2 id="lbj-presidential-library">LBJ Presidential Library</h2>

<p>奥斯汀的另一大景点就是 LBJ Presidential Library。 </p>

<p>Presidential Library 往往是总统退休之后修建的公共图书馆，也往往作为这个总统的历史文献研究和保管之处。修建之处往往也在总统的家乡或者对于总统有特别纪念意义的地方。LBJ就是 林登·贝恩斯·约翰逊总统（ Lyndon Baines Johnson ），的缩写，他在1963年至1969年担任第36任美国总统，其中，1961年至1963年于约翰·肯尼迪任下为第37任美国副总统。</p>

<p>说到约翰逊就不能不说 JFK，1963.11.22 是所有美国人难以忘记的一天，现在问上了年纪的美国人，那天他们在干什么往往都能清楚地说出来。特别是他是什么时候听到肯尼迪遇刺的消息的。肯尼迪遇刺后，约翰逊接任总统，并且成功推动了伟大社会的建设，给予黑人投票权都是约翰逊实现的。当然不得不说，他扩大越战时一个黑点，最终也赔上了自己的政治生涯。</p>

<p>上点照片吧。</p>

<p><img src="http://iphyer.github.com/images/Texas/LBJ.jpeg" alt="LBJ" /></p>

<p><img src="http://iphyer.github.com/images/Texas/LBJ2.jpeg" alt="LBJ" /></p>

<p><img src="http://iphyer.github.com/images/Texas/LBJ3.jpeg" alt="LBJ" /></p>

<h2 id="section-3">公交系统</h2>

<p>奥斯汀的公交还算发达，地铁，公交都有。虽然地铁只有一条线，但是毕竟有地铁不是。不过虽然说是地铁，但是其实是轻轨，全程地上，还是那种不用高架的地上，毕竟德州地广人稀。</p>

<p>但是这个公交系统特别先进，它有自己的 App，所以不找零钱。一次我在公交上投了 2 美元，车票是 1.75 美元，这多出来的 0.25 美元就被吞掉了， 吞掉了， 吞掉了。。。</p>

<p>地铁也是，不给找零，只是把多余的钱充到一张充值电磁卡里面。你可以下次继续用里面的余额。但是是有时间限制的，只有一周。也就是说如果你一周没消费，这个钱也就归公交系统了。。。</p>

<p>我第一次去的时候，因为在美国都是信用卡习惯了，没带多少零钱，带的都是 20 刀，10 刀的零钱，只有两张 1 块钱（ 就是公交那次 ）。要是我投了 20 刀岂不是亏大发了。</p>

<p>当然，奥斯汀的逻辑也是清楚的，这样的情况下，大家都会用电子票。事实也是，大部分车上的乘客都用 App 支付。</p>

<p>给大家看下这个傲娇的车票，</p>

<p><img src="http://iphyer.github.com/images/Texas/ticket.jpg" alt="PhotoTicket" /></p>

<p>不过这也提醒了，出去玩一定要准备零钱。</p>

<p>说实话，如果是住宾馆什么的，退房的时候，老美往往也会在床上放几张 1 刀零钱的。说起来出门在外，带着一部分零钱是最好的。也不用太多， 50 刀左右，有零有整是最好的。</p>

<h2 id="section-4">美食</h2>

<p>德州的饮食，其实就是墨西哥菜和炸鸡，牛排。毕竟这里时牛仔之乡，当然时最完美的美国菜式。</p>

<p><img src="http://iphyer.github.com/images/Texas/food1.jpeg" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/Texas/food2.jpeg" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/Texas/food3.jpeg" alt="food" /></p>

<h1 id="section-5">休斯顿</h1>

<p>说实话，中国人特别熟悉这个城市。主要是 2002 年 “中国向美国最大的单个出口“商品” 姚明一直生活在这个城市并且和这个城市融为一体。在宇航中心参观的时候，就看到人身穿 火箭队(中文) 的球衣。</p>

<p>当然休斯顿本身作为全美第四大城市，外来移民也是很多的。当然，中国人在这里的存在感也是特别强烈这么多，比如休斯顿的中国城就是我去过的最好的中国城。</p>

<p>放几张照片，看看这满目的中国字和纯正的上海菜。</p>

<p><img src="http://iphyer.github.com/images/Texas/hou2.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou3.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou4.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou5.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou6.jpeg" alt="Houston" /> </p>

<p>当然休斯顿更著名的就是，航天中心，放几张照片作为总结</p>

<p><img src="http://iphyer.github.com/images/Texas/hou7.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou8.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou9.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou11.jpeg" alt="Houston" /></p>

<p><img src="http://iphyer.github.com/images/Texas/hou12.jpeg" alt="Houston" /></p>

<h1 id="section-6">总结</h1>

<p>很感慨，一起南大物理系的老兄弟，哥们儿已经走的这么远了，还是需要努力啊！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TA 总结]]></title>
    <link href="http://iphyer.github.com/blog/2017/12/25/tasummary/"/>
    <updated>2017-12-25T15:23:00-06:00</updated>
    <id>http://iphyer.github.com/blog/2017/12/25/tasummary</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>终于在这个学期的 TA 结束了，说起来还是有很多感触的这里总结下。</p>

<p>翻到上一片博文，感慨万千，这里总结下。</p>

<!--more-->

<h1 id="ta-">TA 的工作概括</h1>

<p>毫无疑问，助教无疑是比较忙的。特别是入门课程的助教。这就是为什么我这学期总是满身疲惫的在各个任务之间周旋的原因。</p>

<p>这里放一张我的工作总结图，这里基本上就是这学期付工资的依据，可以说美国人基本上就是依据这个表格给助教发工资的。</p>

<p><img src="http://iphyer.github.com/images/TA/hour.png" alt="ori" /></p>

<p>基本上一周大概有一天多的时间是需要和小本一起度过的，不过虽然辛苦，但是美国高校给你免学费还给你生活费，算算也是挺多钱的。当然还是和一些工作不能比，但是相应的你的工作压力也没那么大，要求也没那么高。</p>

<p>甚至因为个人班上的同学资质不同，所以也不是基于学生成绩的评价标准。</p>

<p>主要的 TA 工作其实很简单，就是改作业，带实验，领导小本做习题课。挑战最大的就是给小本上习题课了，毕竟做为一个外国人，用非母语讲解化学题目还是比较酸爽的感觉。</p>

<h1 id="section-1">课程特点：中美教育的对比</h1>

<p>首先我想讲解下这个课程的特点。</p>

<p>Chem 103 ，中文叫做 普通化学 103 是最最基本的化学课。一个课有 4 个学分，基本一周五天，小本 3 天 Lecture， 2 天需要上助教的习题课。然后还有各种课后作业。现在为了节约成本，都是网上布置习题，小本需要自己完成。到时间，网上的作业自动截止。我曾经问过小本，得到他们的每周需要花费多少时间的数据，基本上这门课能够站占用到他们 30% 到 40% 的时间。换言之，如果你选择了这门课，那么你需要面对的压力和挑战也会大很多。</p>

<p>但是为什么课业负担这么重？</p>

<p>其实是因为这门课对应着国内从初二开始的化学一直到国内大一的初步。</p>

<p>美国高中没有自己的标准，也没有统一的全国考试。他们有对应的 AP 课程。但是，这些都是自愿的，所以没有上过 AP 的同学怎么办？那就是这门课对应的。为了能够压缩在两个学期教授完相应的课程，这门课不得不任务特别重。</p>

<p>其次，因为时间短，所以很多地方教授都是只提重点，不提来龙去脉或者很少给学生示范解题。这就是为什么需要大量的助教。简单来说，时间紧，任务重，必需拆分开上课与做题。这样同时推进，方便学习。</p>

<p>当然，单单就难度而言，美国人并没有降低要求，但是其实并没有国内的中考，高考难度大。因为，很多地方确实体现了美国人考试的特点，这是考核性考试不是选拔性考试。给出知识点，如果你能够熟练掌握说明你的水平足够，就要给高分。国内的很多考试题目往往存在着刁难的意味。因为大家都花了大量的时间学习，所以你出了一个没有区分度的题目，怎么帮助高校选拔人才？</p>

<p>两种制度各有利弊，相应地我觉得美国的更好。</p>

<p>美国的好处在于，时间短，出结果。学生可以在高中尽情学习自己喜欢的东西。要知道，第一节课我在习题课上是板书怎么计算密度。。。所以即使你零基础，你也可以学过来。反过来，国内从初二到高三，花了将近 5 年。虽然基础很扎实，也锻炼了同学的认知水平，但是不得不说浪费了大量不必要的时间。同时残酷的竞争带来各种负面问题。最直接的就是摧毁了大家对于相应学科的热情和喜爱。很多时候往往是为了应付而应付，不得不做并没有得到需要的提高。</p>

<p>同时最最重要的是，以我现在的观点看，很多初中，高中化学都是几百年前的老知识。不说从现代科学的角度，他们不完善，至少是没必要在过时的知识上花太多时间和精力。</p>

<p>最后一点，其实就是这么认真的学习。对于绝大多数中国人，他们还是会遗忘的，如果不是相关专业的，往往最后也就是知道个名词，知道点人物，仅此而已。那些来自牛顿，法拉第，麦克斯韦等等大人物的思想往往会刻骨铭心，但是把这些思想和洞见出成习题并且投入大量时间、精力练习得到的经验则往往随风而去。换句话说，中国教育为了选拔出人，实在是买椟还珠。毕竟那么多习题练习没必要啊。这个时间更适合给学生介绍那些定理的思想来源，历史背景等等。</p>

<p>当然了，考虑到国内的现实，其实高考这样的制度是现条件约束下最好的那个选择。</p>

<p>最后说说这门课，为什么成为全校最大的基础课程。</p>

<p>这里展示下具体数据，</p>

<p><img src="http://iphyer.github.com/images/TA/Stat.png" alt="stat" /></p>

<p>其实离不开医学院的大力支持。</p>

<p>我曾在第一节课问过大家为什么上这么课，很多都回答因为他们想读医学院。美国没有医学院的本科，那么如果你想读医学院，那么你就必须满足医学院的学分要求。而这门课和下学期的姊妹课连在一起一共是 8 个学分，非常之多。而且也是医学比较看重的科目。</p>

<p>在美国，医学院无疑是竞争最激烈的研究生院。如果你不能得到全 A，那么你基本就告别医学院了。虽然从来没有一个医学院会明确说出这一点，但是这基本就是事实。</p>

<p>同时，化学作为医学非常紧密结合的学科，也确实非常重要。同时因为这门课有很多人一起竞争，事实上变成和国内高考差不多的情况。大家在同样的赛道里面互相拼杀，最后也方便医学院找出他们喜欢的人才。</p>

<h1 id="section-2">教学体会</h1>

<p>其实这学期最大的教学体会就是要认真，别人会知道的。</p>

<p>这学期，我基本上尽了自己最大的努力，每次上课前会给小本提前发邮件告诉他们第二天的安排，上完课我会发出总结邮件。当然，有些小本自己不在乎，不去看邮件还是会来问些傻傻的问题也是让人很恼火，但是没办法，他们是衣食父母，还是要好言好语。</p>

<p>其实，倒也不是服务态度，是最后人与人相处还是会有感情的。最怕最怕就是 do not care，你要是真的啥都不在乎那就很难办了。会让大家都很难受。当然还是很高兴的，最后有大量的小本发来感谢邮件。最后的评分也很高。</p>

<h1 id="section-3">提高</h1>

<p>参考小本的意见，其实主要的提高就是时间掌控。</p>

<p>不少人抱怨没讲完题目有点沮丧等等，我想可能更加适合的方法是，我挑题目做。因为有不少小本实在是基础不牢，知识点不够，正常一节课有 10 道题目如果让他们互相讨论，可能只能讲完 5 道题目。那我就挑出 5 道题目，其余作为作业布置下去。</p>

<p>因为这学期还上了国际生助教的培训，归纳起来一句话，给小本的习题课还是大家小组讨论的好。就实际效果而言，美国人也是喜欢聚在一起讨论，相对于言，中国人往往是独行侠。所以我觉得还是要坚持这个上课方式，即使题目讲不完，那就少讲但是也要讲透。</p>

<p>其次就是一些小技巧，比如让小本报数 （count off numbers）然后划分小组，不然就会出现各自和各自的好朋友聚在一起的情况。</p>

<p>大概就是这么多，下学期继续努力！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[助教感受]]></title>
    <link href="http://iphyer.github.com/blog/2017/09/10/week1ta/"/>
    <updated>2017-09-10T23:19:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/09/10/week1ta</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>这学期的TA生活正式开始了，刚刚过去的一周终于正式给小本们上课了。有一点体会记录下来，不过只是初步体会，将来可能再写一个总结。</p>

<!--more-->

<h1 id="section-1">美国的本科教育</h1>

<p>美国的高中，特别是公立高中其实没有统一的大纲和要求，这就导致高中毕业生的水平参差不齐。所以相应的大学班级就有对应的区别，具体来说就是chem103,104和109。数字越大，节奏越快，要求也越高。我教的103基本上就是高中啥化学都没学也可以的学生也可以上。事实上，班上就有从历史来的学生，所以相应的教学就要偏向基础和循序渐进。</p>

<h2 id="section-2">教学安排</h2>
<p>应该这么说，美国老师花在教学上的时间比中国老师的时间多得多的。很多老师都会专门准备课件而且和学生经常面见交流。当然受限于美国人的数学和知识水平，不少情况下教学生确实很累。最大的累在于你需要把自己的水平下降到小本可以理解的水平。这对于教授这样的PhD高手其实是最难的。</p>

<p>当然，作为本校除了数学基础课外最大的公共基础课，这门课有将近2200个学生，光是助教就需要90个。要知道是一个助教负责40个学生。当然不得不说，不是每一个助教都是直接负责教课，很多助教其实是辅助和协调，比如如果当值助教有事情的情况下，就会有辅助助教顶上去。当然辅助助教一般都是高年级老学生，所以即使仓促上阵也是能撑住场子的。</p>

<p>就教学深度上说，我个人的看法是不是特别困难，但是考虑到很多美国学生的基础。其实这个节奏是比较快速的，同样的内容很多中国高中是需要不断讲解，不断做题加深学生的理解。美国的课程可能题目出的不是特别难，但是老师的讲解和学生你做题的时间同样也不多。很多时候都是教授布置下去，学生自己学习。在课堂上，300人的大课堂其实主要看学生自觉。</p>

<p>当然美国人这样设置的时候就考虑到了这点，这就是为什么会招收这么多PhD学生了。因为很多时候都是助教带领学生去练习如何运用概念，说得更直接点，如何应试。应该说，中国的教材在改革开放后主要就是抄袭美国的教材和教学体系，所以看到这些习题还是比较容易掌握的。同样，如果班上有中国的高中生往往他们都是这个班上的大神级别人物。</p>

<p>对于一个普通的美国学生而言，这门课其实是负担很重的。从教材，到各种点名软件，各种辅助教材，各种实验器材，大概还要花200刀的杂费。这还是一门课。这这么算下来，负担还是比较重的，在加上很多高中生来了之后会有巨大的心理和生活挑战。比如在我和一个学生交流的时候，那个学生告诉我，她害怕上课，因为她来自威斯康星的某个农村小镇，她们的小镇自给自足，大概两百人出头，她平时没见过300个人在一起上课的。不过大学本来就是需要你适应新的社会，新的环境。</p>

<h1 id="section-3">助教感受</h1>

<p>这部分可能不太逻辑，因为是感受所以写得比较随意。</p>

<p>第一个感受是累。</p>

<p>这一周，基本上我从周二到周四都是比较忙得，特别是周二，周四。周二，周四早上6点起来，简单吃个早饭，7点出发去学校，因为我是7:45第一节课。当然你要早点去准备各种材料。这样到了7:45,开始上课，50分钟。作为一个非母语助教你还不得不提高警惕，集中精神。然后15分钟转场，就是第二节课。第一节课结束还有小本来问各种问题，不得不尽快解决容易解决的。不能快速说清楚的就让他们发邮件。然后第二节课又是50分钟。之后，有个50分钟休息，我会去买午饭。因为11点到2点就是整整3个小时的实验时间，这3个小时你不得不在实验室不停的关注小本。因为化学实验，虽然一开始比较安全但是到了后面还是会用到酸碱等等。结束了，2:20又会有其他课程等等。等这一天忙完了还要给小本们改作业加实验报告。</p>

<p>当然周三还有两个小时的Help Desk时间。就是我需要在助教办公室坐班，然后有问题的小本会来问问题，基本上这个时候就是遭遇战。因为和讨论课不同，讨论课我设定议程，这个时候是小本来问问题。很多时候都是很累的。因为来问问题的小本往往会有些基础不好或者概念不清，你就需要从头讲起。不过美国你人有个好处，懂就是懂，不懂就说不懂。这样至少知道怎么帮助他们。</p>

<p>作为物理系的同学很多时候我都需要重新学习下基本的课程然后确保自己理解，当然有的时候还是会出现一点问题。只能自己继续努力。</p>

<p>第二个感受是美国人真的是尊重学生。</p>

<p>虽然说我们会给小本打分等，但是其实美国的高校在各个方面都是非常尊重小本的。比如每个课前我都需要给小发邮件告诉小本明天有什么任务。结束了，你还要给小本邮件告诉他们今天学到什么，我们怎么改进。当然这样的好处就是自己的写作水平直线飙升。因为每次邮件都是要用自己的语言总结需要掌握的知识。</p>

<p>第三个感受就是口语。</p>

<p>现在是基本上每次都要在代助教的两天讲5个小时的英语。说实话，我觉得这个对于每一个非母语的PhD都是非常好的训练，因为很多美国小本都是母语，你说得不好他们都能理解，所以你的教学目标不耽误。但是每次都让你不断练习口语，特别是告诉自己必须说出来，不会也必须找个方法说出来。事实就是如果你不断练习口语，口语就会不断进步的。当然了，我还要感谢这些学生，听一个非英语母语的PhD用英语和他们每周说5个小时化学，really appreciate。虽然估计他们看不懂中文。</p>

<p>第四个感受就是教育其实是双向。</p>

<p>如果要是遇到那种自己不认真的学生其实你很少有很好的方法，我们只能不断提起基本的知识点，然后给他们练习。但是总有那么自己学生自己不认真学习，单个助教能做的不多。不过助教团队里面有专门的负责这些学生的特别助教，我们可以向他们报告，他们会专门跟进。一般是一个月后或者第一次考试后，会有专人跟进需要帮助的学生。</p>

<p>总而言之，美国的教学质量还是不错的。主要目标在培养学生自学的能力和适应大学风格的能力。这样的能力可能也是国内需要学习的。当然难度确实是个问题，主要是因为学生的数学基础导致了不得不降低难度。但是综合而言还是比较合适的。同时如果真的是那种有能力的学生，应该去上chem109高阶课程。可以说真正做到了因材施教。同时就国内的教学而言，除了985这样的高校，其余的高校其实难度也不及美国的高校。</p>

<h1 id="section-4">总结</h1>
<p>其实还是很有收获的，好好工作，好好学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何选择博士导师]]></title>
    <link href="http://iphyer.github.com/blog/2017/09/10/choosingpi/"/>
    <updated>2017-09-10T23:16:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/09/10/choosingpi</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>今天新来项目的学弟学妹问怎么选择导师，我就简单说说自己的看法，然后把这个过程罗列下来。</p>

<!--more-->

<h1 id="section-1">标准</h1>
<p>首先，作为选择导师这样一个非常个人化的过程，必须明确事实上很难有人规定说必须怎么怎么。这不是实验室的操作流程必须依次完成。可以说每个人都有每个人的标准，自己的判断。所以千万不能刻舟求剑。</p>

<p>当然，某个程度上有一些标准是共性的。这些标准就是我写在这篇博客中的关键内容。</p>

<h2 id="section-2">硬性标准</h2>
<p>既然说的是博士选导师，那么我假设你是准备走学术路的好苗子。那么其实你就需要关注下导师的几个硬性指标了。</p>

<h3 id="section-3">1. 论文</h3>

<p>这个标准是决定生死的第一标准，一个发不出论文的老板不但自己学术生涯要完蛋，学生更是水深火热。</p>

<p>那么怎么看论文的发表情况:</p>

<p><strong>年均发表论文数量 / 学生人数</strong></p>

<p>这个就是最重要的指标，一般理想的老板这个数量要大于1。这表示，你在这个老板手下工作，一年之后你可以期待自己得到1篇论文。</p>

<p>同时需要考虑下面这么几个细节:</p>

<p>1).血汗工厂的老板。</p>

<p>很多老板的工作是人海战术，一个技术打遍天下，来个体系算一算,来个蛋白测测结构。这个怎么说呢，也好也不好，看你个人特质了。非常套路化的科研，出论文就和流水线差不多，你事实上就是一个熟练的工人。当然发表论文相对也容易，因为有套路可循。不过这也意味着你将来自己独立做科研的时候，可能难度比较大。当然考虑到学术界的现状，这个可能还是不错的。毕竟考虑到很多老板不给学生发论文或者拖延发论文，这个还是缺点。著名的血汗工厂，生物结构，有机化学，凝聚态物理烧炉子。</p>

<p>2).<strong>抢一作的老板绝对是渣老板</strong></p>

<p>老板可以是一作，不过往往是那种特邀评论类的论文。一般的研究型论文，老板把握项目大局，是论文的代言人，所以当通讯作者，负责和同行进行后续交流。碰到一年有四五篇一作（review 除外）的老板，赶紧跑，马不停蹄地跑。这样的老板有多坑，你就想想狸猫换太子对于太子的生母有多惨就行了。</p>

<p>3).文章档次问题</p>

<p>这个问题是这样的，如果有 Science, Nature, Cell,基本上这个老板的科研绝对是不差的。但是NCS更多的是机遇，可遇不可求。所以往往本学科的顶级期刊才是标准，比如物理就是 PRL, 化学就是 JACS，其他的杂志，比如PNAS也可以算，但是要等而下之一点。因为PNAS是美国科学院院士自留地，事实上文章档次参差不齐。</p>

<p>这个问题还可以参考老板的 H Index。一般如果有Google学术的老板都有 H Index，依照这个参考。举个标准吧，国内老板普通的院士级别大概是70左右，当然国外可能更高一些，但是也有限。</p>

<p>4).老板的老板 and 厉害的学生</p>

<p>还需要看下那些好文章是不是都是一个学生发的，如果是，往往是这个学生厉害，不一定是老板的水平。或者也可能是老板的个性很鲜明，导致某类性格的学生发挥特别好，别的性格要慎重。</p>

<p>同时，老板可能很厉害。不过看看发表的论文，是不是其实你的祖师爷厉害，他在不遗余力提携你老板，导致老板培养你其实不太确定，你还不如去祖师爷那儿。</p>

<p>5). 排除挂名论文</p>

<p>现在学术圈谁都有点朋友，所以很多的时候你可能发现这个老师发了很多论文，但是很多都是挂名论文。亲身见过的例子，这学期这个组其实风雨飘零，结果老板已经发了 20 篇论文了。和他们组的人一聊，结果他们也囧呆了，他们一直以为本组今年没论文呢。其实确实本组的学生没论文，但是老板的论文汹涌澎湃。注意计算的时候看看一作是不是老板的学生，毕竟老板可以挂名，不代表你可以挂名。</p>

<h3 id="section-4">2. 学生毕业去向</h3>

<p>对于想做学术的人而言这个指标也很重要。如果我们承认大多数人的能力都是在某一个合理值附近波动，特别是考虑到 PhD 学生其实都是经过一波筛选的前提条件下，那么我们可以合理的假设，5，6年后你老板已经毕业的学生就是你将来可能的去向。</p>

<p>同时这个指标还能告诉你一个现实就是老板是不是支持自己的学生。因为当你毕业的时候作为学术界的一个新人，如果有老板帮助你保驾护航还是会好很多。这个很难调查出来，但是如果考察毕业学生最后成为Faculty的比例是比较容易看出来的。至少高的Faculty比例说明老板还是给予了学生一定的支持的。不要觉得美国人就没有关系，事实是很多教授往往就是自己的老板推荐上去的。这也是为什么你经常会见到师徒几个都是诺贝尔奖得主的情况，当然也可能是诺奖得主培养学生好或者好学生投靠好老板。反之，可以参考下张益唐当年普渡毕业没拿到老板推荐信找不到教职的经历。</p>

<p>当然你要是怀着某种别样的想法的话，你可能需要关注下别的指标，比如你想做的那个方向有没有学生实现。比如你想做咨询或者程序员，要确保老板不是一个阻力，不奢谈支持了。</p>

<h3 id="section-5">3. 学术圈人脉</h3>

<p>作为一个有志于学术的青年，你还是要关注下学术圈的恩恩怨怨。说白了有人的地方就有江湖，往往学术圈都是有自己的圈子和相对应的敌人。一般来说，如果发现有人发表什么 Comments on XXXX 的两方估计关系不会太好。特别是如果对方是大牛的话会有多惨，参考下当年的准晶发现者，得罪了美国化学届大佬Linus Carl Pauling。只要Pauling活着他就不得不隐姓埋名，当然Pauling一死，他还需要等待Pauling的那帮大牛学生不再那么强势了才能拿到诺贝尔奖。</p>

<p>当然这个是一个比较远的因素，但是还是需要了解下。毕竟将来你很可能需要别人支持你，至少别撞到敌对方手里去。</p>

<h3 id="section-6">4.杂项</h3>

<p>还有一些比较零散的指标，比如老板是不是要跳槽，说实话结合个人经历看这个其实是PhD学术生涯的非常严重的打击，很可能直接彻底摧毁你的学术理念。</p>

<h2 id="section-7">软性条件</h2>

<p>其实软性条件往往对于学术生涯的影响更大。如果你和老板之间不能产生有利的化学反应，在漫长的科研生涯中你很有可能会遭受巨大的心理压力。说实话，在学术圈这么多年，疯掉的，跳楼的，想不开的也都见到过，所以我把这个也讨论下。</p>

<h3 id="section-8">和老板交流</h3>

<p>一般来说，老板的邮件都是非常礼貌，非常得体的，你很难从邮件得出什么，所以其实比较好的方法是当面交流观察老板。观察什么?主要是看你和老板之间的感觉，你可能无法得出你是不是喜欢这个人，但是如果这个人是你讨厌的类型，你很容易看出来。当面交流也可以看出来这个老板的性格，比如老板是不是尊重你，关心你。举个例子，他可能要回复邮件，是不是和你打个招呼，当然这个比较 tricky 也很难说清楚。但是最重要的可能是人和人之间的感觉。</p>

<h3 id="section-9">和同组师兄师姐交流</h3>

<p>这个是第一手信息的广泛来源。可以问的问题包括，但不限于，</p>

<p>(1)组里几个人，都在干什么 ==&gt; 这是不是一个大家公开交流，互相关心的组</p>

<p>(2)组会什么时候，什么形式 ==&gt; 周六周日开组会的组慎重，同时看看组会的形式</p>

<p>(3)师兄师姐的来源 ==&gt; 全是某几个国家的人的组考虑下，为什么会成为某个国家的一言堂</p>

<p>(4)问问他们的科研 ==&gt; 你是不是感兴趣</p>

<p>(5)问问他们对于自己在这儿学习的评价，感想 ==&gt; 关注下他们说的内容，比如得失，是不是满意，更加重要的是他们的神态。他们可能不说实话，但是他们的神态往往会告诉你。</p>

<p>(6)他们的精神状态 ==&gt; 科研需要一个人独自在陌生的领域不断前进，所以你需要一种精神。这种精神表现在外面就是你是不是”神气”。
这个词是我和某个老师去外地访问的时候，老师说的 —— 怎么感觉这个组的同学不太精神，一个个都没有那种”神气”。这种”神气”说白了就是某种精神状态的体现。很难具体框定一个标准，但是你一定不希望你读完博士变成一个目光痴呆的 geek 吧。</p>

<p>(7)组里经费怎么样，要做多久的TA ==&gt; TA虽然是锻炼人的好方式，但是老锻炼人就是折磨了。</p>

<h3 id="section-10">和同校不同组的师兄师姐交流</h3>

<p>最关键的是问问他们对于这个导师的看法。往往他们没有利害关系，更容易直接臧否人物，表达观点。一个核心观点是如果你在这个时候听到导师的负面评价，慎重进入。因为考虑到做科研的人数之少和大家交流的匮乏，那么他要是感觉这个老师不好，一定是他有一些可能不方便告诉你的来源，而且这些来源往往都是血泪教训或者前辈憋不住爆发出来的。因为你如果问任何一个PhD某个教授如何如何，最常见的答案往往是，啊，我知道那个教授但是不熟。所以考虑概率之小，他要是直接表达负面观点，你就知道很可能是真的不好。当然不排除是前面学生自己有大问题的情况。不过怎么说呢，如果想挑战概率，那么你一定有特殊的素质和条件。</p>

<h2 id="section-11">如何选择</h2>

<p>基本上，这些就是我选择导师的标准。</p>

<p>怎么选呢?</p>

<p>其实我当时用的方法是用一个Excel表格把上面各个指标都量化了。当时正好在出国选校期间，所以我就结合 US News 的排名，然后把上面各个指标都量化评分出来选择的学校。</p>

<p>当然有的时候人算不如天算，世事茫茫难自料，不过这个是后话了。回到这个问题，其实这个就是我们在现在很火的人工智能中经常面对的如何规划效用函数的问题。一个基本的原则是效用函数是非常主观的判断，所以大家还是要结合自己情况进行选择。</p>

<p>无论如何，想读一个博士学位就解决人生所有的问题其实是不现实的。在这个变化的时代，唯一不变的可能只有变化本身。</p>

<p>不断思考，不断总结，找到自己的人生方向。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求田问舍羞见刘郎——写在来美国一周年之际]]></title>
    <link href="http://iphyer.github.com/blog/2017/08/19/1year/"/>
    <updated>2017-08-19T12:03:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/08/19/1year</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>算算日子到美国已经一年了，正好暑期学期也结束了，正好总结过去，展望未来。</p>

<!--more-->

<h1 id="section-1">过去</h1>

<p>这里我就简单地罗列下过去一年发生的事情，也算是给自己梳理下。前事不忘，后事之师。</p>

<h2 id="section-2">2016.08</h2>

<p>这个月主要是适应美国，老同学从 Texas 到芝加哥，两个人租了车赶到麦迪逊。然后是办理网络，手机号码等等杂事。因为同学有车所以一路上也非常方便。这个时间也开始慢慢熟悉麦迪逊的生活。去国际学生服务处报道的时候认识了YH同学，没想到我两成了过去一年最好的朋友。</p>

<p>告别老同学，结实新同学，开始新生活。</p>

<h2 id="section-3">2016.09</h2>

<p>正式开学，去P教授实验室 Rotation。努力工作，努力上课，发现老美的课程还是有点难度，主要是课程没选好，居然选了一门需要有机化学知识的课程。另外一门数学系的课程，全程 carry　几个小本。发现美国人的本科生其实也不是特别厉害的，换句话说单就数学而言，中国的教育确实是非常好的。</p>

<p>这中间去双子城参见同学的婚礼，也过了自己的第一个在北美大陆的生日。见了不少很久没见到的老同学，不少还在继续挣扎着攻读 PhD。感慨良多，大家都成熟了不少，详见<a href="http://iphyer.github.io/blog/2016/12/22/twin/">USA印象2:双子城游记</a>。</p>

<h2 id="section-4">2016.10</h2>

<p>10月基本没有任何假期，所以是比较辛苦的一个时间，主要任务就是密集的上课还有去新的老师实验室 Rotation。</p>

<p>J 教授是一个很好的美国大婶，非常友善，不过她也开宗明义地告诉我，她打算跳槽，我可以不选择他的实验室。这也解释了为什么我发现她的实验室人很少，不过她做的是机器学习也有生物信息学的方向，所以我还是在她组里 Roatation。</p>

<p>当然，我还需要找到新的组。</p>

<p>这月也正式办理了美国的社保卡号，有了 SSN 终于申请了第一张美国信用卡。</p>

<h2 id="section-5">2016.11</h2>

<p>这次我找到了现老板C的组。现在反思其实当时我就有点动机不纯，我居然关注了老板组的学生毕业的最终去向。不是说不应该关注而是如果你关注这个基本上我们会发现你不会特别喜欢做科研了。说白了，上朔一百年，科研一定是不愁吃喝，不愁生活的人做的事情。最重要的就是那种心思单纯的人往往可以读下来，或者说你对外界的生活关注的越少，你在实现科研的道路上走得越远。</p>

<p>不过无路如何，总算是正式入组了。在组会上正式报告了自己的以前硕士的工作，也算是得到了各位组员的承认。</p>

<p>当然11月也鉴证了史上最奇葩，最惊心动魄大反转的大选。 2016.11月的大选无论你持何种立场都承认这是人类历史重要的转折点。</p>

<p>当然这个月我还抽空过了驾照考试的permit，相当于国内的笔试。</p>

<h2 id="section-6">2016.12</h2>

<p>很快第一个学期就快结束了。</p>

<p>这个月主要的任务是考试，虽然有辛苦之处，但是还是很快完成了所有的课程。</p>

<p>接着就是圣诞节，过了在美国的第一个圣诞节。感谢YH等同学，在冰天雪地的麦迪逊可以吃到中国火锅实在是太对胃口了。</p>

<h2 id="section-7">2017.01</h2>
<p>这个月主要是在各地旅游，因为寒假是圣诞之后一个月，所以和同学飞去了 Florida。在天涯海角，Key West 的碧浪白沙中彻彻底底体会了把南方的温暖。</p>

<p>其实中美两国真的非常像，Florida 说白了就是另一个美国版本的海南岛。详情参见 <a href="http://iphyer.github.io/blog/2017/02/27/folradia/">USA印象4:佛罗里达游记</a>。</p>

<p>当然去佛罗里达更大的收获可能是直观感受了不同于麦迪逊的风土人情。客观说，威斯康星作为传统的农业北方州还是非常保守的，比如麦迪逊过了晚上八点任何店都不卖酒类，但是佛罗里达真是通宵达旦到处都有卖酒，而且居然在一次吃饭的时候发现隔壁桌买酒的人不需要检查ID。。。</p>

<p>这么自由奔放的社会环境当然治安就需要加强。我们在奥兰多的时候，奥兰多机场发生枪击案。离开奥兰多，到了迈阿密发现发生了恶意袭警逃逸，到处都是密布的警力抓捕逃犯。当然这么多警察安全也有了一定的提高。</p>

<p>1.15 号开学，认真上课了。</p>

<p>当然很快，1.28号是举国欢庆的春节，也是和同学一起过了一个团员的春节，主要是大家包饺子。正好这个节日在美国时间周五，正好和同学一起等到了春节联欢晚会，第二个不在家的春节。上一次还要追溯到大二在北京上新东方的时候。时间飞快，很快都要第二个春节了。</p>

<h2 id="section-8">2017.02</h2>

<p>这个学期尝试选了一门CS302的老美基础课。其实主要是讲解Java入门的基础知识，同时是一门大课，课上有将近 300 个人一起上课。</p>

<p>发现老美上课还是比较不错的，至少这个CS课安排的特别精致细密，当然也和这门课的历史有关，毕竟是有50年历史的课程了。</p>

<h2 id="section-9">2017.04</h2>

<p>这段时间就是不断上课，同时平衡科研。还是比较辛苦的，但是最后结果也很值得。终于拿到了全A的成绩单。感觉老美这儿还是非常认可你的努力程度的。你认真去上课，认真听讲，认真写作业最后结果就是很好。你要是水水过来，教授最后就会给你一个水水的结果。</p>

<h2 id="section-10">2017.05</h2>

<p>这是学期期末考试的日子。</p>

<p>因为平时还是很努力的，所以最后的这个期末考试不是特别地辛苦。功夫都下在平时到了考试的时候才不会手忙脚乱。</p>

<p>当然这个月还第一次路考，当然没过去，小小遗憾。</p>

<p>不过这个月(5.15)最大新闻还是老板要跳槽了，各个人都有各自的想法。一开始我还是倾向和老板一起去的，但是随后的交流不断总结优劣势，最终选择了留在麦迪逊。个中原因，之前的博客有很多思考，我就不赘述了。</p>

<h2 id="section-11">2017.06</h2>

<p>这个月其实没怎么干活，在各种想法冲突中，不断寻找出路。当然最后决定自己拼一把之后就感觉很是安心的。</p>

<p>6.15和老板交流，很明确告诉老板不和他走。当然下学期就要自己养活自己了，去做TA吧。</p>

<h2 id="section-12">2017.07</h2>
<p>口语测试，顺利通过。</p>

<p>驾照考试顺利通过。</p>

<p>开始上CS540，人工智能导论，开始上课了。</p>

<p>把之前中科院的论文结尾，DNA 的理论计算部分也顺利完成。</p>

<p>这个7月终于缓和过来了。</p>

<h1 id="section-13">2017.08</h1>

<p>8.18 是我来美国的一周年，一大早就收到老同学的微信，你来美国一周年了。晚上发了一条朋友圈，算作对于这一年的纪念。毕竟一周年也是一个非常重要的节点。</p>

<p>这一周年成功实现了在另一个大陆自己独立生存的目标。</p>

<p>当然最重要的还是未来的方向，没有方向其实任何方向都是逆风。</p>

<p>希望在接下来的一个学期能转入计算机保证硕士。主要是考虑到学术问题，还有就是各种不可控制因素。比如导师恶心这些情况，来美一年，可以说见到听到太多恶心导师的例子了。还是打铁自身硬吧！</p>

<h1 id="section-14">未来</h1>

<p>拿到CS硕士，争取自己养活自己！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[威斯康星麦迪逊路考总结]]></title>
    <link href="http://iphyer.github.com/blog/2017/07/14/dt2/"/>
    <updated>2017-07-14T21:11:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/07/14/dt2</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>今天终于通过了美国的驾照考试，虽然考了两次，但是收获也很多，这里把两次考试总结下，希望对后来人有用。</p>

<!--more-->

<h1 id="section-1">考试经历</h1>

<h2 id="section-2">第一次路考</h2>

<p>这一次考试我主要是找了一个在麦迪逊的访问学者学车，大概一次40刀/小时；如果去找驾校大概是80~95刀/小时。没办法，老美这边人力成本就是比较高，同时对于驾照考试，老美其实一般都是用父母或者朋友的车，需求小所以收费也高。</p>

<p>基本上练了几次，熟悉了路线，访问学者也按照自己的经验教了我很久。</p>

<p>结果考试当天，没有走访问学者的考试路线，也是我自己心态问题，有辆公交车从后面一路卡过来吓了我一跳。后面一直比较紧张，然后速度一直起不来，但是老美认为速度过慢是阻碍交通，威斯康星的 DMV 认为低于限速 10 迈就是速度过慢，直接挂掉。</p>

<h2 id="section-3">第二次路考</h2>

<p>这次主要是暑假时间，两个北大师兄都比较有时间，我就在他们的指导下大概每周开个两三次，一次时间不固定，有的时候是去亚洲超市，有的时候是去沃尔玛。当然路考路线也练习了好久。</p>

<p>今天考试的时候，难度最大的一个路口，两个师兄分别给我做过 3 次练习，当然这个路口也是在考试路线上比较重要的一个路口所以很顺利的通过。后面当然一马平川，开着开着就有感觉这次真的很好，很平稳，要点都做到了。</p>

<p>然后就是回到 DMV 顺利办好了驾照。</p>

<h1 id="section-4">经验</h1>

<h2 id="section-5">驾驶是练出来的不是说出来的</h2>

<p>中国人都说光说不练假把式，美国人的路考也是这样，最重要的就是希望你自己能够多加练习然后去考试。很多美国人都是在父母亲人还有朋友的指导下练习的。作为外国留学生最重要的其实还是师兄师姐熟悉人的资源，最好能找到让你每周练习的车，这样才能完美应对路考。</p>

<p>当然基本概念还是需要知道的，这儿是威斯康星州的Class D road test study guide的中文版<a href="http://iphyer.github.io/blog/2017/05/02/rodetestguide/">威斯康星州路考指南</a>，确保你知道中文、英文的所有要点。</p>

<h2 id="section-6">小车最好</h2>

<p>不过在美国因为是你自己准备车去 DMV 路考，所以有个选择车型的问题，特别是你的师兄师姐可以给你提供车辆的时候你需要选择最合适的车型。很多美国人比较喜欢 pickups truck 或者 SUV，但是必须说明的是这类车往往体积比较大，不太适合路考。当然你要是有技术自信也是没问题的。大车的问题主要是做 Y-Turn 的时候比较麻烦。因为一般让你做 Y-Turn 都是在居民区不太繁华的道路上，这些路不太繁华所以往往也是那种双向车道不会特别宽，那么你掉头的时候大体积车会占用比较大的空间。同时大体积车比较高，在倒车的时候比较难以观察是不是和路牙平行。这类车其实往往会安装车载雷达和后视系统特别是在倒车的时候，不过往往考官会用纸片遮挡，告诉你就是目测 backing 不要看屏幕。但是倒车的一个指标就是你是不是倒车走直线。</p>

<h2 id="section-7">考试是表演</h2>

<p>很多考官的要求比较细致也比较严格，比如倒车遮挡后视雷达屏幕。当时也请明确这是考试所以该做的规范动作还是需要做好。</p>

<p>同时，平时在路上开的时候，往往大家超速个 10% 是没有任何问题的，甚至很多时候是跟着前车速度往前开。这就是你经常看见警察 pull over 超速车的时候是盯着第一辆车 pull over，后面跟着开的人没有责任。但是在考试的时候请严格按照车速开，同时不要太慢。速度过慢或者动作不及时都是扣分项。</p>

<p>还有大家诟病的扭头看问题，这个呢，其实你正常开车的时候很多时候不需要做扭头动作太夸张，但是既然是考试就按照考试要求做。</p>

<p>一句话，路考是表演，你需要按照要求操作。</p>

<h2 id="section-8">路权的概念</h2>

<p>个人感觉这个是中美最大的差异。美国人在开车的时候时时刻刻需要铭记自己的路权是多少，相对于别人的路权是自己在前还是别人在前。这个很多人简单归纳为 stop sign 要停车。当然很正确，但是为什么 stop sign 需要停车？</p>

<p>最核心的原因是这个时候意味着你的路权没有另一个方向的车高，你需要停车取得路权再开。比如你从岔路需要左转开上主路，往往这个时候会有 stop sign(即使没有，你也需要给对向车让，因为你路权低)。因为有路权的概念，这个时候主路上的车辆是不会减速的，因为他的方向没有任何 stop sign 或者提示，这个时候你必须确认路上 clear 才能开。</p>

<h1 id="section-9">备考秘籍</h1>

<p>虽然不太提倡这种记忆路线的考试方式，但是这是大家总结出来的，你看看也是一种方便自己练习的方式。</p>

<p>不过需要提醒的是，我考的两次都没有走经典路线，所以大家还是需要切实提高自己的驾驶技术。</p>

<p>DMV(West DMV, Madison，这个离学校近，大家去的多) 考试会有两条路线，按照从 DMV 出来的方向，一般称为右转路线称为Line1，当然也有左转路线(Line2)，比如我第一次就是左转路线。右转考的多，所以大家总结的也多，渐渐地就有了经典路线，这条路上的一切大家都总结了出来。左转路线一般不考，原因在于左转出去很多路都是麦迪逊的交通主干道，事实上很少考官让你这么开。我也不知道为什么第一次我就幸运的是Line2。第二次考试前还特地多练了几次这个。</p>

<p>预约完路考之后会告诉你Line1 还是 Line2 但是这个也不是绝对，比如我第一次其实是预约的 Line1 但是考的时候可能是考官失误，没有按照 Line1 考我，是按照 Line2　考试的。所以还是需要掌握本领。</p>

<h2 id="section-10">麦迪逊路考经典路线</h2>

<p><img src="http://iphyer.github.com/images/RoadTest/Route1.png" alt="ori" /></p>

<p>这个加考路线就是大家总结出来的经典路线，也是你在学长学姐指导下的练习路线。这个路线最大的有点就是基本的交通情况都有，同时还不是特别繁忙的路线。非常适合考试。</p>

<h2 id="section-11">我的路考路线</h2>

<p>但是我两次都没考经典路线，第二次甚至考了被学长称为麦迪逊第一难的左转完路口。所以大家还是要提高基本素养。</p>

<p><img src="http://iphyer.github.com/images/RoadTest/Route2.png" alt="ori" /></p>

<p>紫红色的箭头就是那个难度很大的左转弯位置，经典路线避开了一个大幅度的左转弯开进了 Eau Claire 的小路，但是这次我是直接挑战这个大左转弯。这个左转弯除了难度，还在于 Whitney 是麦迪逊比较重要的主干道，车流量大同时车速较快。</p>

<p><img src="http://iphyer.github.com/images/RoadTest/LeftTurn.png" alt="ori" /></p>

<p>具体的示意图如上，其实这个路口最危险的地方就是车来车往，往往在这个路口你会犹豫，甚至不敢过去，因为你没有路权，必须等各个方向的车流过去。</p>

<p>其实这儿必须你自己体会到的一个要点就是你充分利用两个绿化带隔离出来的待转弯区，把一个大的左转弯分解成两个半转弯，这也是在车流繁忙的 Whitney 唯一的方法。</p>

<p>后面的路线具体细节已经记不清了，所以只是标注这个当时感觉难度最大的部分。</p>

<h2 id="section-12">总结</h2>

<p>终于拿到了美国驾照，暑假开始订立的一个目标正式达成，继续努力，继续加油，继续向前!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美国饮食记录2017-06]]></title>
    <link href="http://iphyer.github.com/blog/2017/06/24/food201706/"/>
    <updated>2017-06-24T16:20:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/06/24/food201706</id>
    <content type="html"><![CDATA[<h1 id="section">前言</h1>

<p>一个学期结束了，清空下手机，发现还有不少这半年吃东西的照片，按照半年前的帖子，这里总结一下。</p>

<!--more-->

<h1 id="section-1">食物</h1>

<p><img src="http://iphyer.github.com/images/food201606/78.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/70.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/17.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/27.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/6.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/61.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/50.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/80.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/63.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/26.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/60.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/23.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/22.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/39.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/9.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/18.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/42.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/66.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/28.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/55.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/75.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/34.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/69.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/62.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/43.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/15.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/37.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/25.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/52.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/72.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/77.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/51.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/5.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/56.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/46.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/8.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/19.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/47.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/13.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/73.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/32.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/24.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/30.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/21.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/16.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/67.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/65.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/76.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/44.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/0.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/40.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/64.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/31.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/3.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/59.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/29.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/35.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/71.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/45.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/12.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/2.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/79.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/58.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/7.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/54.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/53.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/49.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/57.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/68.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/10.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/38.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/36.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/48.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/11.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/74.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/4.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/33.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/1.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/20.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/14.JPG" alt="food" /></p>

<p><img src="http://iphyer.github.com/images/food201606/41.JPG" alt="food" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于PhD的思考]]></title>
    <link href="http://iphyer.github.com/blog/2017/06/21/phd/"/>
    <updated>2017-06-21T22:34:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/06/21/phd</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>最近在面对人生的十字路口，转折关头，心里确实是千头万绪，所以写下这篇博客把自己的思考整理总结出来。主要是很多东西不写出来总是有种朦朦胧胧，无法说清楚的意思。</p>

<p>思考的内容很简单，一句话，对于PhD，学术路的现状和走学术路的要求。</p>

<p>如果用一句话概括，学术路很难走，如果想走，请做到这篇博客文章的最后一部分的细节要求。</p>

<!--more-->

<h1 id="section-1">讨论原则</h1>

<p>这个问题为什么值得单独列出一章来，是因为我发现在国内的洗脑教育下，即使是受过一定高等教育的人往往也没办法树立正确讨论问题的框架。</p>

<blockquote>
  <p>在评价一个事物好坏的时候，必须用统计的思维而不是个例的介绍。如果你准备挑战统计规律请确保自己有独特的本领。</p>
</blockquote>

<p>先举几个错误的例子吧。</p>

<blockquote>
  <p>我有一个同事的表哥的儿子XXX，在美国XXX学校求学,然后干XXX，现在挺好的。</p>
</blockquote>

<p>这是国内惯用的洗脑手段，比如向XX学习等等。</p>

<p>首先他能做，不代表你能做，比如他有某种特殊的条件，你不具备。比如他的学校允许修第二专业，你的学校不允许。其次，即使他过去能做，不代表你现在也能做，比如30年前，汽车工程师是非常好的工业，现在请看看底特律，已经是全美最危险的城市了。最后说一个，他成功了，能保证你成功吗?事实是任何人不能保证，我们只能这么讨论问题，我不能保证最终的结果，但是从统计上看，你有90%的概率成功。如果承认统计的观点，那么这个举个例就是彻头彻尾的自我欺骗，参考国内搞了几十年的学习先进典型。</p>

<p>之前我以为这个就是普通国人的思维缺陷，但是现在发现连在国外受过高等教育的大教授也会陷入这种缺点不能自拔，参看这篇 <a href="https://mp.weixin.qq.com/s/PysuIURHvn720igN1BqTnA">北大教授饶毅：我为什么不建议中国学生上美国顶尖大学?</a>。通篇的思路就是，“我有一个XXX，然后论证下自己观点”，我很好奇，这是揣着明白装糊涂吧。饶毅试试这么发表论文看看审稿人怎么喷他。</p>

<p>一句话——抛开统计谈问题都是耍流氓!　要么是真的傻，就怕是别有用心装糊涂。</p>

<h1 id="section-2">学术路的现状</h1>

<p>首先需要，强调不同专业是很不一样的。单单就最终成为教授的难易程度，就业越好的专业，找教职的难度越低。</p>

<p>怎么定义难易程度？不能单单看最后学生成为教授的比例，这样比，计算机系其实和物理、化学差不多，不过中间的过程就完全不同了。计算机很多人是主动放弃追求学术，进入工业界，这样最后的成为教授的比例虽低，但是过程并不辛酸；物理、化学，是因为找不到教职很多人不得不放弃学术，仓促就业，个中辛酸苦泪不足为外人道，不得已的情况下，最后成为教授的比例也低。当然也有比例高的，比如商学院的 PhD　那真是万里挑一，因为人家是照着最后的教授岗位招人的。大多数情况下，只招收硕士生。</p>

<p>当然这些数据也在不断变动，因为个人的原因，我主要描述下基础学科。不过要说明的是，这个问题可以这么考虑，好就业的学科，其实主动让一部分人自愿不去竞争学术岗位，无形中剩下的都是专心学术的。这部分人即使学术路不顺利，往往也不至于太痛苦，最痛苦是那些不好就业还不得不呆在这个行业的，参见北美生物千老，自行百度谷歌下他们妻离子散，苟且偷生的生活。</p>

<p>这里列几个供参考，<a href="http://blog.sciencenet.cn/blog-250217-801146.html">千老的黄昏</a>,　诺贝尔奖获得者 Harold Varmus　的劝退文章 <a href="http://www.pnas.org/content/111/16/5773.full">Rescuing US biomedical research from its systemic flaws</a>,某总结帖子<a href="https://www.zhihu.com/question/28347460">现在学生物出路真有那么不济吗？</a>。</p>

<h2 id="section-3">供求关系</h2>

<p>其实任何行业的前景，都是由供求关系决定的。</p>

<p>现在基础学科的现状就是，对于新教授的需求基本稳定，现在成为基础学科的教授，可以说都是杀出一条血路。从概率上说，只有 5%　的新入学 PhD　会成为教授。同时这个数据还要再乘上一个学校系数，好学校概率更大，以政治学教授为例　<a href="http://gppreview.com/2012/12/03/superpowers-the-american-academic-elite/">SUPERPOWERS: THE AMERICAN ACADEMIC ELITE</a>。</p>

<p>至于 5%　这个概率是我从身边的经历和下面这篇报道种得到的，看生命科学和自然科学那部分，到了2011 年只有 10%，还要注意的是，这个统计是刚刚毕业的时候的数据，再算上晋升过程中的折损，这个概率其实还是挺高的，比如博士后做到一半不做了，或者续不上合同回国了(身边的例子)，最后 5%　真的还算多了。</p>

<p><img src="http://iphyer.github.com/images/PHD/percent.png" alt="走上教职百分比" /></p>

<p>数据来自，<a href="https://www.theatlantic.com/business/archive/2013/02/how-many-phds-actually-get-to-become-college-professors/273434/">theatlantic: How Many Ph.D.’s Actually Get to Become College Professors?</a></p>

<p>亲身听到的数据，当放出一个教职的时候，会有 400 个申请者，最后挑 10 个人来面试，最后发一个 offer。那剩下的那些人呢？全美的现状就是这个，还需要考虑到再你读完 PhD　毕业的过程种，更多的人成为了博后，做了千老。要知道一旦成为老千，基本上都是拖家带口，苟延残喘，很少改变所以会不断增多。</p>

<h2 id="section-4">工作待遇</h2>

<p>虽然做学术很少讲究物质享受，但是还是要考虑一部分的现实因素。</p>

<p>这方面的一个例子就是别听某些教授说话，比如清华某著名生物教授的无耻谰言，生物的就业很稳定——是啊，根本就没有就业当然稳定。</p>

<p>那么听什么，其实看看 Science，Nature 的报道就可以知道了。Science，Nature　其实也可以说是利益相关了，但是还是很多劝退的声音传出来，为什么？　很简单，情况太严重了，有点良心的都不敢骗人了。</p>

<p>这里转两篇中文的，<a href="http://www.cn-healthcare.com/article/20150918/content-478045.html">Nature：博士后的困境，漫漫福利路在何方？</a>, <a href="http://m.biodiscover.com/news/research/652743.html">Science：做博士后的代价</a>。</p>

<p>当然，我们还是要看统计，看数据，<a href="http://www.sohu.com/a/125225378_464038">美国博士后：工作和薪酬</a>，最最触目惊心的就是，学术工作的残酷现实。</p>

<p>当然你要是非要说，学术工作不是为了钱，这个思想很好啊，适合学术，少年加油！</p>

<h2 id="section-5">工作的挑战</h2>

<p>其实学术工作的最大挑战，那些都不是最重要的。</p>

<blockquote>
  <p>最最重要的是，做学术你必须要有智力自信。</p>
</blockquote>

<p>其实我自己学物理的最大体会就是时刻感到一种无力感，智力的碾压感，聪明人太多的感觉。</p>

<p>但是如果你走学术路，请放下侥幸，你必须是和这样一批人进行竞争。</p>

<p>本质上，学术工作的收益曲线(用收入衡量)和个人能力是这样的:</p>

<p><img src="http://iphyer.github.com/images/PHD/require.jpg" alt="收益和能力曲线" />
　
本质上，这是因为学术工作是一种精英主义的领域，你不成为这个领域的前列，你的生活会非常惨烈。</p>

<p>放上几个别人的例子吧，<a href="https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=405675970&amp;idx=1&amp;sn=e1c5a9e35c217600b5d11f57f6a336e5&amp;scene=21#wechat_redirect">从博士到码工 — 心有千千结</a>,<a href="https://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788623&amp;idx=1&amp;sn=101f7ab8ddac5efb327fabd7fb1a1b03&amp;chksm=8bfdba87bc8a3391a67e9195320c92a1b094e6bf8530a42ee97d424ec375a135ad8703a710b5&amp;scene=21#wechat_redirect">读研究生利弊之我见</a>,<a href="https://mp.weixin.qq.com/s/eRIDwq5v7f_Be9iEoWGLnw">关于读研和工作的一点思考</a>。</p>

<p>同时还有一个影响很大的关于博士毕业出路的思考文章，<a href="https://www.douban.com/note/153303128/">博士后的困境</a>，其实文章找了一个特别好的切入点，某年春末夏初的某事件导致美国的中国留学生都可以得到美国绿卡，从此可以自由在美国择业，这个情况下，他们的选择如何呢？</p>

<blockquote>
  <p>对留美博士而言，这像极了一个随机试验。你198X年入学，就有绿卡，1990年秋天入学，就没有绿卡，而其他条件都不变。所以我在控制了其他因素之后，去比较有资格拿绿卡的中国博士和晚一些来美的没资格拿绿卡的中国博士，发现这天上掉下来的绿卡，大大降低了毕业后选择博士后岗位的概率，下降了24%。在数学物理化学等领域，这概率下降了40%到50%， 而就算在几乎人人都读博士后的生物学领域，这概率也下降了11%。</p>
</blockquote>

<p>当然了这个问题也不是第一次有人提出并且总结，<a href="https://www.zhihu.com/question/24715674">美国众多基础学科的博士后最终去向是什么？</a>，<a href="https://www.mitbbs.com/article_t/Biology/32073703.html">生物转行跳坑–总论</a>。</p>

<h1 id="section-6">走学术路的要求</h1>

<h2 id="section-7">总要求</h2>

<p>简单说，有如下 4　个方面的要求:</p>

<ol>
  <li>学术素养。毕竟这是基础，你必须有较高的水平。</li>
  <li>学术人脉。现在找学术教职，除了水平极高的，大多数人还是需要有人保驾护航，这就是考验人脉的时候了。当然很多时候这个也是看出身，看门第的。为什么诺奖，院士的弟子好找工作?当然这个也要考虑各种变动,比如老板跳槽了怎么办，帕金森症了怎么办(身边同学的亲身经历，老板帕金森了必须转)?</li>
  <li>学术交流。作为一个外国人，你的口语怎么样，你能不能和人谈笑风生，这是非常重要的。</li>
  <li>学术成果。学术成果其实就是论文，这个事实上很有运气的成分，你的老板是不是给你一个好课题，你是不是适合这个课题等等。</li>
</ol>

<h2 id="section-8">学术成果–10篇向上的文章</h2>

<p>上面四个方面，第四个方面是可以量化，其他的很多都是主观因素的内容，所以这里我把学术成果量化考虑下，提出具体的要求。</p>

<p>如果考虑博士5年的模型，假定第一年调整状态，熟悉课题和上课，那么第一年允许不发表论文。那么从第二年开始，你应该保持这样的发表文章速度，一年有3篇文章发表，同时有1篇是那种高 IF 的文章，化学是 JACS,物理是 PRL。按照这个要求 4　年毕业之后，你应该有 12篇文章，其中4到5篇，JACS或者PRL级别的论文，Nature,Science是对于非生命学科太难得了，所以不列入要求，当然有了就更好。同时要允许，其中有那么一些失败的研究，毕竟我们做的是科研不是炒菜，也不是工程项目，允许失败或者弯路，所以你需要至少 10 篇文章，其中5篇高IF。</p>

<p>当然这里的文章都要你是一作或者共同一作，挂名那就不好说了，毕竟这个很看运气的。有时候搭顺风车可以出一个好工作，这个也是可遇不可求的。</p>

<p>当然写到这里，默默对比下，你会发现大部分博士生都不合格，其实这就对了，因为最终要淘汰至少 90%　的人啊，你觉得你轻轻松松能做到吗?</p>

<h2 id="section-9">理想的学术状态</h2>

<p>其实上面这个也是可以达到的，当然需要你保持很好的学术状态。</p>

<p>我和普林斯顿的某个教授聊天的时候，他提到的一个观点，我觉得很好这里记录下来，正好这个观点也呼应我前面的文章数目要求。</p>

<p>他认为，任何好的研究者应该同时手头做4份工作。</p>

<p>第一份工作，已经完成了所有的数据，图表，结论也已经得出，剩下的主要是写作，投稿。这个过程大概需要3~6个月。</p>

<p>第二份工作，是已经完成了智力挑战部分，剩下的工作纯是时间限制的，比如你已经知道大致的结论和预期，但是你的实验需要时间积累数据同时完成对照组这些。</p>

<p>第三份工作，就是还在解决智力挑战部分。你的这份研究其实还在初级阶段，还需要不断讨论，思考，想新的方法，新的思路，尝试新的试剂，条件等等。这个工作时间不确定，但是必须不断挑战，在这个阶段你也需要不断和导师，同学进行讨论和探讨。</p>

<p>第四份工作，其实就是给自己找课题。课题来源，老板指派，个人兴趣，交流讨论出来，看文献触类旁通得到灵感等等。这个阶段需要每天都做，但是不确定时间，但是也非常重要，这是科研的发动机和源头活水。</p>

<h1 id="section-10">总结</h1>

<p>写了一大堆，都是劝退的话，其实这是把内心的狂乱思考都总结下来，条分缕析。</p>

<p>科研有千种不好，但是敌不过一个好，你感兴趣。是你发自内心的兴趣，不是父母的期望，不是那美国绿卡，不是更好的物质条件，这些你读个 CS 硕士项目都能够得到，而且更好。</p>

<p>真的喜欢，其实就是知道了所有的不好后依然爱ta。</p>

<p>扪心自问，你喜欢科研吗?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[USA印象5:缅因州&波士顿游记]]></title>
    <link href="http://iphyer.github.com/blog/2017/06/07/maine/"/>
    <updated>2017-06-07T16:00:00-05:00</updated>
    <id>http://iphyer.github.com/blog/2017/06/07/maine</id>
    <content type="html"><![CDATA[<h1 id="section">起因</h1>

<p>前段时间忙里偷闲去了一趟美东主要是在波士顿和缅因州旅游了一圈，现在整理记录成这篇游记。</p>

<!--more-->

<h1 id="section-1">行程</h1>

<p><img src="http://iphyer.github.com/images/maine/trip.png" alt="行程" /></p>

<p>其实一路上，在路上花了不少时间开车。</p>

<p>一路向着东海岸开过去，确实是美国的环境很好，一路上都是那种一看就知道无人居住的原始丛林，只有一条公路从中间通过。</p>

<p><img src="http://iphyer.github.com/images/maine/road.JPG" alt="森林" /></p>

<h1 id="section-2">感受</h1>

<h2 id="section-3">总体感受</h2>
<p>美国东部是最早的北美殖民地，所以在美东游玩的时候，特别是在马萨诸塞州游玩的时候，时刻有历史感萦绕。这儿相当于是美国的历史文化区。</p>

<p>特别是在波士顿这样的历史文化名城，一不小心就可以看到美国的国父们在这里曾经战斗生活过的标志。</p>

<p>波士顿街景:</p>

<p><img src="http://iphyer.github.com/images/maine/Boston1.JPG" alt="波士顿街景1" /></p>

<p><img src="http://iphyer.github.com/images/maine/Boston2.JPG" alt="波士顿街景2" /></p>

<p>下面记几个特别有意思的景点吧。</p>

<h2 id="portland-head-lighthouse">Portland Head Lighthouse</h2>

<p>一路开过去，中途看了一座非常有历史感的灯塔。</p>

<p><img src="http://iphyer.github.com/images/maine/Lighthouse.PNG" alt="灯塔" /></p>

<p>灯塔其实是个特别小的景点，但是自然环境不错。这是当然北美最早的一批灯塔。三百多年前，那些背井离乡的人们就是在这座灯塔的指引下来到异国他乡，开始了自己的新生活。</p>

<p><img src="http://iphyer.github.com/images/maine/LH1.JPG" alt="灯塔景观" /></p>

<p><img src="http://iphyer.github.com/images/maine/LH2.JPG" alt="灯塔景观" /></p>

<h2 id="acadia-national-park">阿卡迪亚国家公园（Acadia National Park）</h2>

<p>继续北上，就来到了缅因州著名的阿科底亚国家公园（Acadia National Park)。</p>

<p>这座国家公园面对大西洋，包含山区、海岸线、森林和湖泊，自然环境非常好，最好的景观就是大海和落日。</p>

<p><img src="http://iphyer.github.com/images/maine/NP1.JPG" alt="阿卡迪亚国家公园1" /></p>

<p><img src="http://iphyer.github.com/images/maine/NP2.JPG" alt="阿卡迪亚国家公园2" /></p>

<p><img src="http://iphyer.github.com/images/maine/NP3.JPG" alt="阿卡迪亚国家公园3" /></p>

<h2 id="section-4">出海观鱼</h2>

<p>也顺便从国家公园附近出发座观看鲸鱼的轮船，结果不巧鲸鱼没看到。但是乘船在大西洋驰骋也是不错的体验。</p>

<p><img src="http://iphyer.github.com/images/maine/boat2.JPG" alt="观鱼1" /></p>

<p><img src="http://iphyer.github.com/images/maine/boat1.JPG" alt="观鱼2" /></p>

<h2 id="section-5">食物和中国城</h2>

<p>当然到了海边，一定要尝尝海鲜了。</p>

<p><img src="http://iphyer.github.com/images/maine/food2.JPG" alt="海鲜" /></p>

<p>波士顿的中国城也不错，当然比较偏港台。</p>

<p><img src="http://iphyer.github.com/images/maine/food1.JPG" alt="香港茶1" /></p>

<p><img src="http://iphyer.github.com/images/maine/food3.JPG" alt="香港茶2" /></p>

<p><img src="http://iphyer.github.com/images/maine/ChinaTown.JPG" alt="China Town" /></p>

<p><img src="http://iphyer.github.com/images/maine/CT1.JPG" alt="China Town" /></p>

<h1 id="section-6">波士顿大学</h1>
<p>当然也不能忘了此行重中之重，波士顿大学。</p>

<p>应该说波士顿大学确实是在宝地，波士顿本身就很好了，波士顿大学就在波士顿市中心附近，隔河相望 MIT 确实是让人印象深刻的好学校。</p>

<p><img src="http://iphyer.github.com/images/maine/BU1.JPG" alt="BU1" /></p>

<p>当然也不可否认，化学系确实很小，居然是化学系，物理系，工程学院，三个院系合用一座楼。</p>

<p><img src="http://iphyer.github.com/images/maine/BU2.JPG" alt="BU2" /></p>

<p><img src="http://iphyer.github.com/images/maine/BU3.JPG" alt="BU3" /></p>

<p><img src="http://iphyer.github.com/images/maine/BU4.JPG" alt="BU4" /></p>
]]></content>
  </entry>
  
</feed>
